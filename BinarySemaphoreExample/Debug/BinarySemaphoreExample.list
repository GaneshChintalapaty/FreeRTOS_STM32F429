
BinarySemaphoreExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005150  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08005300  08005300  00006300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c0  080054c0  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  080054c0  080054c0  000064c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054c8  080054c8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c8  080054c8  000064c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054cc  080054cc  000064cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080054d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          000041f4  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004254  20004254  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f7b  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fe3  00000000  00000000  0001c00b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  0001eff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de6  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002550d  00000000  00000000  00020fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000146f5  00000000  00000000  000464c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e31a1  00000000  00000000  0005abb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013dd59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d64  00000000  00000000  0013dd9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00142b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080052e8 	.word	0x080052e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	080052e8 	.word	0x080052e8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	4a07      	ldr	r2, [pc, #28]	@ (800051c <vApplicationGetIdleTaskMemory+0x2c>)
 8000500:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	4a06      	ldr	r2, [pc, #24]	@ (8000520 <vApplicationGetIdleTaskMemory+0x30>)
 8000506:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2280      	movs	r2, #128	@ 0x80
 800050c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	2000007c 	.word	0x2000007c
 8000520:	2000011c 	.word	0x2000011c

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b5b0      	push	{r4, r5, r7, lr}
 8000526:	b098      	sub	sp, #96	@ 0x60
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fb4f 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f85b 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f8f3 	bl	800071c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000536:	f000 f8c7 	bl	80006c8 <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 800053a:	2300      	movs	r3, #0
 800053c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800053e:	2300      	movs	r3, #0
 8000540:	65fb      	str	r3, [r7, #92]	@ 0x5c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 8000542:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000546:	2101      	movs	r1, #1
 8000548:	4618      	mov	r0, r3
 800054a:	f002 fa80 	bl	8002a4e <osSemaphoreCreate>
 800054e:	4603      	mov	r3, r0
 8000550:	4a1e      	ldr	r2, [pc, #120]	@ (80005cc <main+0xa8>)
 8000552:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of normalTask */
  osThreadDef(normalTask, startNormalTask, osPriorityNormal, 0, 128);
 8000554:	4b1e      	ldr	r3, [pc, #120]	@ (80005d0 <main+0xac>)
 8000556:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800055a:	461d      	mov	r5, r3
 800055c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000560:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000564:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  normalTaskHandle = osThreadCreate(osThread(normalTask), NULL);
 8000568:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fa0d 	bl	800298e <osThreadCreate>
 8000574:	4603      	mov	r3, r0
 8000576:	4a17      	ldr	r2, [pc, #92]	@ (80005d4 <main+0xb0>)
 8000578:	6013      	str	r3, [r2, #0]

  /* definition and creation of highTask */
  osThreadDef(highTask, startHighTask, osPriorityAboveNormal, 0, 128);
 800057a:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <main+0xb4>)
 800057c:	f107 0420 	add.w	r4, r7, #32
 8000580:	461d      	mov	r5, r3
 8000582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000586:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  highTaskHandle = osThreadCreate(osThread(highTask), NULL);
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f002 f9fa 	bl	800298e <osThreadCreate>
 800059a:	4603      	mov	r3, r0
 800059c:	4a0f      	ldr	r2, [pc, #60]	@ (80005dc <main+0xb8>)
 800059e:	6013      	str	r3, [r2, #0]

  /* definition and creation of lowTask */
  osThreadDef(lowTask, startLowTask, osPriorityBelowNormal, 0, 128);
 80005a0:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <main+0xbc>)
 80005a2:	1d3c      	adds	r4, r7, #4
 80005a4:	461d      	mov	r5, r3
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lowTaskHandle = osThreadCreate(osThread(lowTask), NULL);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 f9e9 	bl	800298e <osThreadCreate>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a09      	ldr	r2, [pc, #36]	@ (80005e4 <main+0xc0>)
 80005c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005c2:	f002 f9dd 	bl	8002980 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c6:	bf00      	nop
 80005c8:	e7fd      	b.n	80005c6 <main+0xa2>
 80005ca:	bf00      	nop
 80005cc:	20000370 	.word	0x20000370
 80005d0:	0800530c 	.word	0x0800530c
 80005d4:	20000364 	.word	0x20000364
 80005d8:	08005334 	.word	0x08005334
 80005dc:	20000368 	.word	0x20000368
 80005e0:	08005358 	.word	0x08005358
 80005e4:	2000036c 	.word	0x2000036c

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	@ 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 fd8e 	bl	8005118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b2b      	ldr	r3, [pc, #172]	@ (80006c0 <SystemClock_Config+0xd8>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a2a      	ldr	r2, [pc, #168]	@ (80006c0 <SystemClock_Config+0xd8>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <SystemClock_Config+0xd8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <SystemClock_Config+0xdc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a24      	ldr	r2, [pc, #144]	@ (80006c4 <SystemClock_Config+0xdc>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <SystemClock_Config+0xdc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800065c:	23b4      	movs	r3, #180	@ 0xb4
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fde5 	bl	800123c <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000678:	f000 f958 	bl	800092c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800067c:	f000 fd8e 	bl	800119c <HAL_PWREx_EnableOverDrive>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000686:	f000 f951 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000696:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800069c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2105      	movs	r1, #5
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 f83f 	bl	800172c <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006b4:	f000 f93a 	bl	800092c <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	@ 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <MX_USART1_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 8000700:	f001 fd08 	bl	8002114 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f90f 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000031c 	.word	0x2000031c
 8000718:	40011000 	.word	0x40011000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_GPIO_Init+0x70>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a14      	ldr	r2, [pc, #80]	@ (800078c <MX_GPIO_Init+0x70>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_GPIO_Init+0x70>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_GPIO_Init+0x70>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a0d      	ldr	r2, [pc, #52]	@ (800078c <MX_GPIO_Init+0x70>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_GPIO_Init+0x70>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800076a:	2301      	movs	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	4619      	mov	r1, r3
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_GPIO_Init+0x74>)
 800077e:	f000 fb49 	bl	8000e14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000782:	bf00      	nop
 8000784:	3720      	adds	r7, #32
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40020000 	.word	0x40020000

08000794 <startNormalTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startNormalTask */
void startNormalTask(void const * argument)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  char *str1 = "Entered NormalTask and waiting for semaphore\r\n";
 800079c:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <startNormalTask+0x84>)
 800079e:	617b      	str	r3, [r7, #20]
	  HAL_UART_Transmit(&huart1, (uint8_t *) str1, strlen(str1), 100);
 80007a0:	6978      	ldr	r0, [r7, #20]
 80007a2:	f7ff fd25 	bl	80001f0 <strlen>
 80007a6:	4603      	mov	r3, r0
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	2364      	movs	r3, #100	@ 0x64
 80007ac:	6979      	ldr	r1, [r7, #20]
 80007ae:	481b      	ldr	r0, [pc, #108]	@ (800081c <startNormalTask+0x88>)
 80007b0:	f001 fd00 	bl	80021b4 <HAL_UART_Transmit>
	  osSemaphoreWait(BinSemHandle, osWaitForever);
 80007b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <startNormalTask+0x8c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 f979 	bl	8002ab4 <osSemaphoreWait>
	  char *str3 = "Semaphore acquired by NormalTask\r\n";
 80007c2:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <startNormalTask+0x90>)
 80007c4:	613b      	str	r3, [r7, #16]
	  HAL_UART_Transmit(&huart1, (uint8_t *) str3, strlen(str3), 100);
 80007c6:	6938      	ldr	r0, [r7, #16]
 80007c8:	f7ff fd12 	bl	80001f0 <strlen>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	2364      	movs	r3, #100	@ 0x64
 80007d2:	6939      	ldr	r1, [r7, #16]
 80007d4:	4811      	ldr	r0, [pc, #68]	@ (800081c <startNormalTask+0x88>)
 80007d6:	f001 fced 	bl	80021b4 <HAL_UART_Transmit>
	  while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));	//Wait for btn input
 80007da:	bf00      	nop
 80007dc:	2101      	movs	r1, #1
 80007de:	4812      	ldr	r0, [pc, #72]	@ (8000828 <startNormalTask+0x94>)
 80007e0:	f000 fcc4 	bl	800116c <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f8      	beq.n	80007dc <startNormalTask+0x48>
	  char *str2 = "Leaving NormalTask and releasing Semaphore\r\n";
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <startNormalTask+0x98>)
 80007ec:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart1, (uint8_t *) str2, strlen(str2), 100);
 80007ee:	68f8      	ldr	r0, [r7, #12]
 80007f0:	f7ff fcfe 	bl	80001f0 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	2364      	movs	r3, #100	@ 0x64
 80007fa:	68f9      	ldr	r1, [r7, #12]
 80007fc:	4807      	ldr	r0, [pc, #28]	@ (800081c <startNormalTask+0x88>)
 80007fe:	f001 fcd9 	bl	80021b4 <HAL_UART_Transmit>
	  osSemaphoreRelease(BinSemHandle);
 8000802:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <startNormalTask+0x8c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f002 f9a2 	bl	8002b50 <osSemaphoreRelease>
	  osDelay(500);
 800080c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000810:	f002 f909 	bl	8002a26 <osDelay>
  {
 8000814:	e7c2      	b.n	800079c <startNormalTask+0x8>
 8000816:	bf00      	nop
 8000818:	08005374 	.word	0x08005374
 800081c:	2000031c 	.word	0x2000031c
 8000820:	20000370 	.word	0x20000370
 8000824:	080053a4 	.word	0x080053a4
 8000828:	40020000 	.word	0x40020000
 800082c:	080053c8 	.word	0x080053c8

08000830 <startHighTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startHighTask */
void startHighTask(void const * argument)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startHighTask */
  /* Infinite loop */
  for(;;)
  {
	  char *str1 = "Entered HighTask and waiting for semaphore\r\n";
 8000838:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <startHighTask+0x74>)
 800083a:	617b      	str	r3, [r7, #20]
	  HAL_UART_Transmit(&huart1, (uint8_t *) str1, strlen(str1), 100);
 800083c:	6978      	ldr	r0, [r7, #20]
 800083e:	f7ff fcd7 	bl	80001f0 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	b29a      	uxth	r2, r3
 8000846:	2364      	movs	r3, #100	@ 0x64
 8000848:	6979      	ldr	r1, [r7, #20]
 800084a:	4817      	ldr	r0, [pc, #92]	@ (80008a8 <startHighTask+0x78>)
 800084c:	f001 fcb2 	bl	80021b4 <HAL_UART_Transmit>
	  osSemaphoreWait(BinSemHandle, osWaitForever);
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <startHighTask+0x7c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f04f 31ff 	mov.w	r1, #4294967295
 8000858:	4618      	mov	r0, r3
 800085a:	f002 f92b 	bl	8002ab4 <osSemaphoreWait>
	  char *str3 = "Semaphore acquired by HighTask\r\n";
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <startHighTask+0x80>)
 8000860:	613b      	str	r3, [r7, #16]
	  HAL_UART_Transmit(&huart1, (uint8_t *) str3, strlen(str3), 100);
 8000862:	6938      	ldr	r0, [r7, #16]
 8000864:	f7ff fcc4 	bl	80001f0 <strlen>
 8000868:	4603      	mov	r3, r0
 800086a:	b29a      	uxth	r2, r3
 800086c:	2364      	movs	r3, #100	@ 0x64
 800086e:	6939      	ldr	r1, [r7, #16]
 8000870:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <startHighTask+0x78>)
 8000872:	f001 fc9f 	bl	80021b4 <HAL_UART_Transmit>
	  char *str2 = "Leaving HighTask and releasing Semaphore\r\n";
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <startHighTask+0x84>)
 8000878:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart1, (uint8_t *) str2, strlen(str2), 100);
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f7ff fcb8 	bl	80001f0 <strlen>
 8000880:	4603      	mov	r3, r0
 8000882:	b29a      	uxth	r2, r3
 8000884:	2364      	movs	r3, #100	@ 0x64
 8000886:	68f9      	ldr	r1, [r7, #12]
 8000888:	4807      	ldr	r0, [pc, #28]	@ (80008a8 <startHighTask+0x78>)
 800088a:	f001 fc93 	bl	80021b4 <HAL_UART_Transmit>
	  osSemaphoreRelease(BinSemHandle);
 800088e:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <startHighTask+0x7c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f002 f95c 	bl	8002b50 <osSemaphoreRelease>
	  osDelay(500);
 8000898:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800089c:	f002 f8c3 	bl	8002a26 <osDelay>
  {
 80008a0:	bf00      	nop
 80008a2:	e7c9      	b.n	8000838 <startHighTask+0x8>
 80008a4:	080053f8 	.word	0x080053f8
 80008a8:	2000031c 	.word	0x2000031c
 80008ac:	20000370 	.word	0x20000370
 80008b0:	08005428 	.word	0x08005428
 80008b4:	0800544c 	.word	0x0800544c

080008b8 <startLowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLowTask */
void startLowTask(void const * argument)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startLowTask */
  /* Infinite loop */
  for(;;)
  {
	  char *str1 = "Entered LowTask\r\n";
 80008c0:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <startLowTask+0x44>)
 80008c2:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart1, (uint8_t *) str1, strlen(str1), 100);
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff fc93 	bl	80001f0 <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	2364      	movs	r3, #100	@ 0x64
 80008d0:	68f9      	ldr	r1, [r7, #12]
 80008d2:	480b      	ldr	r0, [pc, #44]	@ (8000900 <startLowTask+0x48>)
 80008d4:	f001 fc6e 	bl	80021b4 <HAL_UART_Transmit>
	  char *str2 = "Leaving LowTask\r\n";
 80008d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000904 <startLowTask+0x4c>)
 80008da:	60bb      	str	r3, [r7, #8]
	  HAL_UART_Transmit(&huart1, (uint8_t *) str2, strlen(str2), 100);
 80008dc:	68b8      	ldr	r0, [r7, #8]
 80008de:	f7ff fc87 	bl	80001f0 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	2364      	movs	r3, #100	@ 0x64
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <startLowTask+0x48>)
 80008ec:	f001 fc62 	bl	80021b4 <HAL_UART_Transmit>
	  osDelay(500);
 80008f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008f4:	f002 f897 	bl	8002a26 <osDelay>
  {
 80008f8:	bf00      	nop
 80008fa:	e7e1      	b.n	80008c0 <startLowTask+0x8>
 80008fc:	08005478 	.word	0x08005478
 8000900:	2000031c 	.word	0x2000031c
 8000904:	0800548c 	.word	0x0800548c

08000908 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	@ (8000928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d101      	bne.n	800091e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091a:	f000 f979 	bl	8000c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40010000 	.word	0x40010000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <Error_Handler+0x8>

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b12      	ldr	r3, [pc, #72]	@ (800098c <HAL_MspInit+0x54>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	4a11      	ldr	r2, [pc, #68]	@ (800098c <HAL_MspInit+0x54>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094c:	6453      	str	r3, [r2, #68]	@ 0x44
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <HAL_MspInit+0x54>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <HAL_MspInit+0x54>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <HAL_MspInit+0x54>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	@ 0x40
 800096a:	4b08      	ldr	r3, [pc, #32]	@ (800098c <HAL_MspInit+0x54>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	210f      	movs	r1, #15
 800097a:	f06f 0001 	mvn.w	r0, #1
 800097e:	f000 fa1f 	bl	8000dc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a19      	ldr	r2, [pc, #100]	@ (8000a14 <HAL_UART_MspInit+0x84>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d12c      	bne.n	8000a0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <HAL_UART_MspInit+0x88>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	4a17      	ldr	r2, [pc, #92]	@ (8000a18 <HAL_UART_MspInit+0x88>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c2:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <HAL_UART_MspInit+0x88>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <HAL_UART_MspInit+0x88>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a10      	ldr	r2, [pc, #64]	@ (8000a18 <HAL_UART_MspInit+0x88>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <HAL_UART_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009fc:	2307      	movs	r3, #7
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <HAL_UART_MspInit+0x8c>)
 8000a08:	f000 fa04 	bl	8000e14 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	@ 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40011000 	.word	0x40011000
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020000 	.word	0x40020000

08000a20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08c      	sub	sp, #48	@ 0x30
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	4b2f      	ldr	r3, [pc, #188]	@ (8000af4 <HAL_InitTick+0xd4>)
 8000a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a38:	4a2e      	ldr	r2, [pc, #184]	@ (8000af4 <HAL_InitTick+0xd4>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a40:	4b2c      	ldr	r3, [pc, #176]	@ (8000af4 <HAL_InitTick+0xd4>)
 8000a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a4c:	f107 020c 	add.w	r2, r7, #12
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4611      	mov	r1, r2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 f888 	bl	8001b6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a5c:	f001 f872 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 8000a60:	4603      	mov	r3, r0
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a68:	4a23      	ldr	r2, [pc, #140]	@ (8000af8 <HAL_InitTick+0xd8>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	0c9b      	lsrs	r3, r3, #18
 8000a70:	3b01      	subs	r3, #1
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a74:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <HAL_InitTick+0xdc>)
 8000a76:	4a22      	ldr	r2, [pc, #136]	@ (8000b00 <HAL_InitTick+0xe0>)
 8000a78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <HAL_InitTick+0xdc>)
 8000a7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a82:	4a1e      	ldr	r2, [pc, #120]	@ (8000afc <HAL_InitTick+0xdc>)
 8000a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a88:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <HAL_InitTick+0xdc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <HAL_InitTick+0xdc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <HAL_InitTick+0xdc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a9a:	4818      	ldr	r0, [pc, #96]	@ (8000afc <HAL_InitTick+0xdc>)
 8000a9c:	f001 f898 	bl	8001bd0 <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d11b      	bne.n	8000ae6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000aae:	4813      	ldr	r0, [pc, #76]	@ (8000afc <HAL_InitTick+0xdc>)
 8000ab0:	f001 f8e8 	bl	8001c84 <HAL_TIM_Base_Start_IT>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000aba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d111      	bne.n	8000ae6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ac2:	2019      	movs	r0, #25
 8000ac4:	f000 f998 	bl	8000df8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b0f      	cmp	r3, #15
 8000acc:	d808      	bhi.n	8000ae0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	6879      	ldr	r1, [r7, #4]
 8000ad2:	2019      	movs	r0, #25
 8000ad4:	f000 f974 	bl	8000dc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <HAL_InitTick+0xe4>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
 8000ade:	e002      	b.n	8000ae6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3730      	adds	r7, #48	@ 0x30
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	431bde83 	.word	0x431bde83
 8000afc:	20000374 	.word	0x20000374
 8000b00:	40010000 	.word	0x40010000
 8000b04:	20000004 	.word	0x20000004

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <NMI_Handler+0x4>

08000b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <MemManage_Handler+0x4>

08000b20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b46:	f001 f90d 	bl	8001d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000374 	.word	0x20000374

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b7c:	f7ff ffea 	bl	8000b54 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	@ (8000bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f004 fb15 	bl	80051d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fcbb 	bl	8000524 <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bb0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bbc:	080054d0 	.word	0x080054d0
  ldr r2, =_sbss
 8000bc0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bc4:	20004254 	.word	0x20004254

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <HAL_Init+0x40>)
 8000bd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <HAL_Init+0x40>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	@ (8000c0c <HAL_Init+0x40>)
 8000bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f8d8 	bl	8000daa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	200f      	movs	r0, #15
 8000bfc:	f7ff ff10 	bl	8000a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fe9a 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023c00 	.word	0x40023c00

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	200003bc 	.word	0x200003bc

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	@ (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	200003bc 	.word	0x200003bc

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4907      	ldr	r1, [pc, #28]	@ (8000cec <__NVIC_EnableIRQ+0x38>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	@ (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	@ (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	@ 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	@ 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ff4c 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd2:	f7ff ff61 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000dd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	6978      	ldr	r0, [r7, #20]
 8000dde:	f7ff ffb1 	bl	8000d44 <NVIC_EncodePriority>
 8000de2:	4602      	mov	r2, r0
 8000de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de8:	4611      	mov	r1, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff80 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff54 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	@ 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
 8000e2e:	e177      	b.n	8001120 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f040 8166 	bne.w	800111a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d005      	beq.n	8000e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d130      	bne.n	8000ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	f003 0201 	and.w	r2, r3, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d017      	beq.n	8000f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d123      	bne.n	8000f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	220f      	movs	r2, #15
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	69b9      	ldr	r1, [r7, #24]
 8000f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0203 	and.w	r2, r3, #3
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 80c0 	beq.w	800111a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b66      	ldr	r3, [pc, #408]	@ (8001138 <HAL_GPIO_Init+0x324>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	4a65      	ldr	r2, [pc, #404]	@ (8001138 <HAL_GPIO_Init+0x324>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000faa:	4b63      	ldr	r3, [pc, #396]	@ (8001138 <HAL_GPIO_Init+0x324>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fb6:	4a61      	ldr	r2, [pc, #388]	@ (800113c <HAL_GPIO_Init+0x328>)
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a58      	ldr	r2, [pc, #352]	@ (8001140 <HAL_GPIO_Init+0x32c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d037      	beq.n	8001052 <HAL_GPIO_Init+0x23e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a57      	ldr	r2, [pc, #348]	@ (8001144 <HAL_GPIO_Init+0x330>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d031      	beq.n	800104e <HAL_GPIO_Init+0x23a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a56      	ldr	r2, [pc, #344]	@ (8001148 <HAL_GPIO_Init+0x334>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d02b      	beq.n	800104a <HAL_GPIO_Init+0x236>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a55      	ldr	r2, [pc, #340]	@ (800114c <HAL_GPIO_Init+0x338>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d025      	beq.n	8001046 <HAL_GPIO_Init+0x232>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a54      	ldr	r2, [pc, #336]	@ (8001150 <HAL_GPIO_Init+0x33c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d01f      	beq.n	8001042 <HAL_GPIO_Init+0x22e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a53      	ldr	r2, [pc, #332]	@ (8001154 <HAL_GPIO_Init+0x340>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d019      	beq.n	800103e <HAL_GPIO_Init+0x22a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a52      	ldr	r2, [pc, #328]	@ (8001158 <HAL_GPIO_Init+0x344>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0x226>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a51      	ldr	r2, [pc, #324]	@ (800115c <HAL_GPIO_Init+0x348>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x222>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a50      	ldr	r2, [pc, #320]	@ (8001160 <HAL_GPIO_Init+0x34c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x21e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4f      	ldr	r2, [pc, #316]	@ (8001164 <HAL_GPIO_Init+0x350>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x21a>
 800102a:	2309      	movs	r3, #9
 800102c:	e012      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800102e:	230a      	movs	r3, #10
 8001030:	e010      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001032:	2308      	movs	r3, #8
 8001034:	e00e      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001036:	2307      	movs	r3, #7
 8001038:	e00c      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800103a:	2306      	movs	r3, #6
 800103c:	e00a      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800103e:	2305      	movs	r3, #5
 8001040:	e008      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001042:	2304      	movs	r3, #4
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001046:	2303      	movs	r3, #3
 8001048:	e004      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800104a:	2302      	movs	r3, #2
 800104c:	e002      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001052:	2300      	movs	r3, #0
 8001054:	69fa      	ldr	r2, [r7, #28]
 8001056:	f002 0203 	and.w	r2, r2, #3
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	4093      	lsls	r3, r2
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001064:	4935      	ldr	r1, [pc, #212]	@ (800113c <HAL_GPIO_Init+0x328>)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001072:	4b3d      	ldr	r3, [pc, #244]	@ (8001168 <HAL_GPIO_Init+0x354>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001096:	4a34      	ldr	r2, [pc, #208]	@ (8001168 <HAL_GPIO_Init+0x354>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800109c:	4b32      	ldr	r3, [pc, #200]	@ (8001168 <HAL_GPIO_Init+0x354>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c0:	4a29      	ldr	r2, [pc, #164]	@ (8001168 <HAL_GPIO_Init+0x354>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010c6:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <HAL_GPIO_Init+0x354>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001168 <HAL_GPIO_Init+0x354>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <HAL_GPIO_Init+0x354>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001114:	4a14      	ldr	r2, [pc, #80]	@ (8001168 <HAL_GPIO_Init+0x354>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	f67f ae84 	bls.w	8000e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3724      	adds	r7, #36	@ 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40013800 	.word	0x40013800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021000 	.word	0x40021000
 8001154:	40021400 	.word	0x40021400
 8001158:	40021800 	.word	0x40021800
 800115c:	40021c00 	.word	0x40021c00
 8001160:	40022000 	.word	0x40022000
 8001164:	40022400 	.word	0x40022400
 8001168:	40013c00 	.word	0x40013c00

0800116c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	4013      	ands	r3, r2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e001      	b.n	800118e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <HAL_PWREx_EnableOverDrive+0x90>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	4a1f      	ldr	r2, [pc, #124]	@ (800122c <HAL_PWREx_EnableOverDrive+0x90>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b6:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <HAL_PWREx_EnableOverDrive+0x90>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <HAL_PWREx_EnableOverDrive+0x94>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c8:	f7ff fd36 	bl	8000c38 <HAL_GetTick>
 80011cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011ce:	e009      	b.n	80011e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011d0:	f7ff fd32 	bl	8000c38 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011de:	d901      	bls.n	80011e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e01f      	b.n	8001224 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <HAL_PWREx_EnableOverDrive+0x98>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011f0:	d1ee      	bne.n	80011d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f8:	f7ff fd1e 	bl	8000c38 <HAL_GetTick>
 80011fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011fe:	e009      	b.n	8001214 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001200:	f7ff fd1a 	bl	8000c38 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800120e:	d901      	bls.n	8001214 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e007      	b.n	8001224 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001214:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <HAL_PWREx_EnableOverDrive+0x98>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001220:	d1ee      	bne.n	8001200 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40023800 	.word	0x40023800
 8001230:	420e0040 	.word	0x420e0040
 8001234:	40007000 	.word	0x40007000
 8001238:	420e0044 	.word	0x420e0044

0800123c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e267      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d075      	beq.n	8001346 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800125a:	4b88      	ldr	r3, [pc, #544]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b04      	cmp	r3, #4
 8001264:	d00c      	beq.n	8001280 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001266:	4b85      	ldr	r3, [pc, #532]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800126e:	2b08      	cmp	r3, #8
 8001270:	d112      	bne.n	8001298 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001272:	4b82      	ldr	r3, [pc, #520]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800127a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800127e:	d10b      	bne.n	8001298 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001280:	4b7e      	ldr	r3, [pc, #504]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d05b      	beq.n	8001344 <HAL_RCC_OscConfig+0x108>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d157      	bne.n	8001344 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e242      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a0:	d106      	bne.n	80012b0 <HAL_RCC_OscConfig+0x74>
 80012a2:	4b76      	ldr	r3, [pc, #472]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a75      	ldr	r2, [pc, #468]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e01d      	b.n	80012ec <HAL_RCC_OscConfig+0xb0>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x98>
 80012ba:	4b70      	ldr	r3, [pc, #448]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6f      	ldr	r2, [pc, #444]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b6d      	ldr	r3, [pc, #436]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a6c      	ldr	r2, [pc, #432]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0xb0>
 80012d4:	4b69      	ldr	r3, [pc, #420]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a68      	ldr	r2, [pc, #416]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 80012da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b66      	ldr	r3, [pc, #408]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a65      	ldr	r2, [pc, #404]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 80012e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d013      	beq.n	800131c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fca0 	bl	8000c38 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fc9c 	bl	8000c38 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	@ 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e207      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b5b      	ldr	r3, [pc, #364]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0xc0>
 800131a:	e014      	b.n	8001346 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fc8c 	bl	8000c38 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fc88 	bl	8000c38 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	@ 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e1f3      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	4b51      	ldr	r3, [pc, #324]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0xe8>
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d063      	beq.n	800141a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001352:	4b4a      	ldr	r3, [pc, #296]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00b      	beq.n	8001376 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135e:	4b47      	ldr	r3, [pc, #284]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001366:	2b08      	cmp	r3, #8
 8001368:	d11c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136a:	4b44      	ldr	r3, [pc, #272]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d116      	bne.n	80013a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	4b41      	ldr	r3, [pc, #260]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <HAL_RCC_OscConfig+0x152>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e1c7      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	4b3b      	ldr	r3, [pc, #236]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4937      	ldr	r1, [pc, #220]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	e03a      	b.n	800141a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d020      	beq.n	80013ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ac:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <HAL_RCC_OscConfig+0x244>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b2:	f7ff fc41 	bl	8000c38 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ba:	f7ff fc3d 	bl	8000c38 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e1a8      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	4b28      	ldr	r3, [pc, #160]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4925      	ldr	r1, [pc, #148]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
 80013ec:	e015      	b.n	800141a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <HAL_RCC_OscConfig+0x244>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fc20 	bl	8000c38 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fc:	f7ff fc1c 	bl	8000c38 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e187      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d036      	beq.n	8001494 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d016      	beq.n	800145c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <HAL_RCC_OscConfig+0x248>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001434:	f7ff fc00 	bl	8000c38 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff fbfc 	bl	8000c38 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e167      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <HAL_RCC_OscConfig+0x240>)
 8001450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x200>
 800145a:	e01b      	b.n	8001494 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145c:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <HAL_RCC_OscConfig+0x248>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7ff fbe9 	bl	8000c38 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	e00e      	b.n	8001488 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146a:	f7ff fbe5 	bl	8000c38 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d907      	bls.n	8001488 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e150      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
 800147c:	40023800 	.word	0x40023800
 8001480:	42470000 	.word	0x42470000
 8001484:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	4b88      	ldr	r3, [pc, #544]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 800148a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ea      	bne.n	800146a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 8097 	beq.w	80015d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a6:	4b81      	ldr	r3, [pc, #516]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10f      	bne.n	80014d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b7d      	ldr	r3, [pc, #500]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	4a7c      	ldr	r2, [pc, #496]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c2:	4b7a      	ldr	r3, [pc, #488]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4b77      	ldr	r3, [pc, #476]	@ (80016b0 <HAL_RCC_OscConfig+0x474>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d118      	bne.n	8001510 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014de:	4b74      	ldr	r3, [pc, #464]	@ (80016b0 <HAL_RCC_OscConfig+0x474>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a73      	ldr	r2, [pc, #460]	@ (80016b0 <HAL_RCC_OscConfig+0x474>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fba5 	bl	8000c38 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f2:	f7ff fba1 	bl	8000c38 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e10c      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	4b6a      	ldr	r3, [pc, #424]	@ (80016b0 <HAL_RCC_OscConfig+0x474>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x2ea>
 8001518:	4b64      	ldr	r3, [pc, #400]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151c:	4a63      	ldr	r2, [pc, #396]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6713      	str	r3, [r2, #112]	@ 0x70
 8001524:	e01c      	b.n	8001560 <HAL_RCC_OscConfig+0x324>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b05      	cmp	r3, #5
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x30c>
 800152e:	4b5f      	ldr	r3, [pc, #380]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001532:	4a5e      	ldr	r2, [pc, #376]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6713      	str	r3, [r2, #112]	@ 0x70
 800153a:	4b5c      	ldr	r3, [pc, #368]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153e:	4a5b      	ldr	r2, [pc, #364]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6713      	str	r3, [r2, #112]	@ 0x70
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0x324>
 8001548:	4b58      	ldr	r3, [pc, #352]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154c:	4a57      	ldr	r2, [pc, #348]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6713      	str	r3, [r2, #112]	@ 0x70
 8001554:	4b55      	ldr	r3, [pc, #340]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001558:	4a54      	ldr	r2, [pc, #336]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 800155a:	f023 0304 	bic.w	r3, r3, #4
 800155e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d015      	beq.n	8001594 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff fb66 	bl	8000c38 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156e:	e00a      	b.n	8001586 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001570:	f7ff fb62 	bl	8000c38 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e0cb      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001586:	4b49      	ldr	r3, [pc, #292]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0ee      	beq.n	8001570 <HAL_RCC_OscConfig+0x334>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff fb50 	bl	8000c38 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159c:	f7ff fb4c 	bl	8000c38 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e0b5      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b2:	4b3e      	ldr	r3, [pc, #248]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1ee      	bne.n	800159c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015be:	7dfb      	ldrb	r3, [r7, #23]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d105      	bne.n	80015d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c4:	4b39      	ldr	r3, [pc, #228]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c8:	4a38      	ldr	r2, [pc, #224]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 80015ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a1 	beq.w	800171c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015da:	4b34      	ldr	r3, [pc, #208]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d05c      	beq.n	80016a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d141      	bne.n	8001672 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ee:	4b31      	ldr	r3, [pc, #196]	@ (80016b4 <HAL_RCC_OscConfig+0x478>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fb20 	bl	8000c38 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff fb1c 	bl	8000c38 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e087      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	4b27      	ldr	r3, [pc, #156]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001628:	019b      	lsls	r3, r3, #6
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	3b01      	subs	r3, #1
 8001634:	041b      	lsls	r3, r3, #16
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	491b      	ldr	r1, [pc, #108]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <HAL_RCC_OscConfig+0x478>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff faf5 	bl	8000c38 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff faf1 	bl	8000c38 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e05c      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x416>
 8001670:	e054      	b.n	800171c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <HAL_RCC_OscConfig+0x478>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fade 	bl	8000c38 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fada 	bl	8000c38 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e045      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_RCC_OscConfig+0x470>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x444>
 800169e:	e03d      	b.n	800171c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e038      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000
 80016b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <HAL_RCC_OscConfig+0x4ec>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d028      	beq.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d121      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d11a      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016e8:	4013      	ands	r3, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d111      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fe:	085b      	lsrs	r3, r3, #1
 8001700:	3b01      	subs	r3, #1
 8001702:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d107      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001712:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0cc      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b68      	ldr	r3, [pc, #416]	@ (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d90c      	bls.n	8001768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b65      	ldr	r3, [pc, #404]	@ (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b63      	ldr	r3, [pc, #396]	@ (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0b8      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001780:	4b59      	ldr	r3, [pc, #356]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a58      	ldr	r2, [pc, #352]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800178a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001798:	4b53      	ldr	r3, [pc, #332]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a52      	ldr	r2, [pc, #328]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a4:	4b50      	ldr	r3, [pc, #320]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	494d      	ldr	r1, [pc, #308]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d044      	beq.n	800184c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	4b47      	ldr	r3, [pc, #284]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d119      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e07f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b3f      	ldr	r3, [pc, #252]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b3b      	ldr	r3, [pc, #236]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e067      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	4b37      	ldr	r3, [pc, #220]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4934      	ldr	r1, [pc, #208]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7ff fa0c 	bl	8000c38 <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7ff fa08 	bl	8000c38 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e04f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b2b      	ldr	r3, [pc, #172]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1eb      	bne.n	8001824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d20c      	bcs.n	8001874 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b20      	ldr	r3, [pc, #128]	@ (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e032      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4916      	ldr	r1, [pc, #88]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189e:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	490e      	ldr	r1, [pc, #56]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018b2:	f000 f821 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	490a      	ldr	r1, [pc, #40]	@ (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	5ccb      	ldrb	r3, [r1, r3]
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	4a09      	ldr	r2, [pc, #36]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f8a4 	bl	8000a20 <HAL_InitTick>

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00
 80018e8:	40023800 	.word	0x40023800
 80018ec:	080054a8 	.word	0x080054a8
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018fc:	b094      	sub	sp, #80	@ 0x50
 80018fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001910:	4b79      	ldr	r3, [pc, #484]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b08      	cmp	r3, #8
 800191a:	d00d      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x40>
 800191c:	2b08      	cmp	r3, #8
 800191e:	f200 80e1 	bhi.w	8001ae4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x34>
 8001926:	2b04      	cmp	r3, #4
 8001928:	d003      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x3a>
 800192a:	e0db      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4b73      	ldr	r3, [pc, #460]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x204>)
 800192e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001930:	e0db      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001932:	4b73      	ldr	r3, [pc, #460]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001934:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001936:	e0d8      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001938:	4b6f      	ldr	r3, [pc, #444]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001940:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001942:	4b6d      	ldr	r3, [pc, #436]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d063      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194e:	4b6a      	ldr	r3, [pc, #424]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	099b      	lsrs	r3, r3, #6
 8001954:	2200      	movs	r2, #0
 8001956:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001958:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800195a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800195c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001960:	633b      	str	r3, [r7, #48]	@ 0x30
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	@ 0x34
 8001966:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800196a:	4622      	mov	r2, r4
 800196c:	462b      	mov	r3, r5
 800196e:	f04f 0000 	mov.w	r0, #0
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	0159      	lsls	r1, r3, #5
 8001978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800197c:	0150      	lsls	r0, r2, #5
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4621      	mov	r1, r4
 8001984:	1a51      	subs	r1, r2, r1
 8001986:	6139      	str	r1, [r7, #16]
 8001988:	4629      	mov	r1, r5
 800198a:	eb63 0301 	sbc.w	r3, r3, r1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800199c:	4659      	mov	r1, fp
 800199e:	018b      	lsls	r3, r1, #6
 80019a0:	4651      	mov	r1, sl
 80019a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019a6:	4651      	mov	r1, sl
 80019a8:	018a      	lsls	r2, r1, #6
 80019aa:	4651      	mov	r1, sl
 80019ac:	ebb2 0801 	subs.w	r8, r2, r1
 80019b0:	4659      	mov	r1, fp
 80019b2:	eb63 0901 	sbc.w	r9, r3, r1
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ca:	4690      	mov	r8, r2
 80019cc:	4699      	mov	r9, r3
 80019ce:	4623      	mov	r3, r4
 80019d0:	eb18 0303 	adds.w	r3, r8, r3
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	462b      	mov	r3, r5
 80019d8:	eb49 0303 	adc.w	r3, r9, r3
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ea:	4629      	mov	r1, r5
 80019ec:	024b      	lsls	r3, r1, #9
 80019ee:	4621      	mov	r1, r4
 80019f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019f4:	4621      	mov	r1, r4
 80019f6:	024a      	lsls	r2, r1, #9
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019fe:	2200      	movs	r2, #0
 8001a00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a08:	f7fe fbfa 	bl	8000200 <__aeabi_uldivmod>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4613      	mov	r3, r2
 8001a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a14:	e058      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a16:	4b38      	ldr	r3, [pc, #224]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	099b      	lsrs	r3, r3, #6
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	4611      	mov	r1, r2
 8001a22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a26:	623b      	str	r3, [r7, #32]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a30:	4642      	mov	r2, r8
 8001a32:	464b      	mov	r3, r9
 8001a34:	f04f 0000 	mov.w	r0, #0
 8001a38:	f04f 0100 	mov.w	r1, #0
 8001a3c:	0159      	lsls	r1, r3, #5
 8001a3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a42:	0150      	lsls	r0, r2, #5
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4641      	mov	r1, r8
 8001a4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a4e:	4649      	mov	r1, r9
 8001a50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a68:	ebb2 040a 	subs.w	r4, r2, sl
 8001a6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	00eb      	lsls	r3, r5, #3
 8001a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a7e:	00e2      	lsls	r2, r4, #3
 8001a80:	4614      	mov	r4, r2
 8001a82:	461d      	mov	r5, r3
 8001a84:	4643      	mov	r3, r8
 8001a86:	18e3      	adds	r3, r4, r3
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	464b      	mov	r3, r9
 8001a8c:	eb45 0303 	adc.w	r3, r5, r3
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	028b      	lsls	r3, r1, #10
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	028a      	lsls	r2, r1, #10
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	61fa      	str	r2, [r7, #28]
 8001ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001abc:	f7fe fba0 	bl	8000200 <__aeabi_uldivmod>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	0c1b      	lsrs	r3, r3, #16
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ad8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ae2:	e002      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3750      	adds	r7, #80	@ 0x50
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	00f42400 	.word	0x00f42400
 8001b00:	007a1200 	.word	0x007a1200

08001b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	0a9b      	lsrs	r3, r3, #10
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4903      	ldr	r1, [pc, #12]	@ (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	080054b8 	.word	0x080054b8

08001b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b48:	f7ff ffdc 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0b5b      	lsrs	r3, r3, #13
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	@ (8001b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	080054b8 	.word	0x080054b8

08001b6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	220f      	movs	r2, #15
 8001b7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0203 	and.w	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b88:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b94:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	08db      	lsrs	r3, r3, #3
 8001ba6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bae:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <HAL_RCC_GetClockConfig+0x60>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 020f 	and.w	r2, r3, #15
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40023c00 	.word	0x40023c00

08001bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e041      	b.n	8001c66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f839 	bl	8001c6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f000 f9c0 	bl	8001f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d001      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e04e      	b.n	8001d3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a23      	ldr	r2, [pc, #140]	@ (8001d48 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d022      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x80>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc6:	d01d      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x80>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8001d4c <HAL_TIM_Base_Start_IT+0xc8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d018      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x80>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d50 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d013      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x80>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d54 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00e      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x80>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1b      	ldr	r2, [pc, #108]	@ (8001d58 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d009      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x80>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a19      	ldr	r2, [pc, #100]	@ (8001d5c <HAL_TIM_Base_Start_IT+0xd8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d004      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x80>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a18      	ldr	r2, [pc, #96]	@ (8001d60 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d111      	bne.n	8001d28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d010      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0201 	orr.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d26:	e007      	b.n	8001d38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	40000400 	.word	0x40000400
 8001d50:	40000800 	.word	0x40000800
 8001d54:	40000c00 	.word	0x40000c00
 8001d58:	40010400 	.word	0x40010400
 8001d5c:	40014000 	.word	0x40014000
 8001d60:	40001800 	.word	0x40001800

08001d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d020      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01b      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0202 	mvn.w	r2, #2
 8001d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8d2 	bl	8001f58 <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8c4 	bl	8001f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f8d5 	bl	8001f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d020      	beq.n	8001e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01b      	beq.n	8001e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0204 	mvn.w	r2, #4
 8001de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2202      	movs	r2, #2
 8001dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8ac 	bl	8001f58 <HAL_TIM_IC_CaptureCallback>
 8001e00:	e005      	b.n	8001e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f89e 	bl	8001f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f8af 	bl	8001f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d020      	beq.n	8001e60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01b      	beq.n	8001e60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0208 	mvn.w	r2, #8
 8001e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2204      	movs	r2, #4
 8001e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f886 	bl	8001f58 <HAL_TIM_IC_CaptureCallback>
 8001e4c:	e005      	b.n	8001e5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f878 	bl	8001f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f889 	bl	8001f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d020      	beq.n	8001eac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01b      	beq.n	8001eac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f06f 0210 	mvn.w	r2, #16
 8001e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2208      	movs	r2, #8
 8001e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f860 	bl	8001f58 <HAL_TIM_IC_CaptureCallback>
 8001e98:	e005      	b.n	8001ea6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f852 	bl	8001f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f863 	bl	8001f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00c      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d007      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0201 	mvn.w	r2, #1
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fd1c 	bl	8000908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00c      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f906 	bl	8002100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00c      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f834 	bl	8001f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0320 	and.w	r3, r3, #32
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0220 	mvn.w	r2, #32
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8d8 	bl	80020ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a46      	ldr	r2, [pc, #280]	@ (80020c0 <TIM_Base_SetConfig+0x12c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d013      	beq.n	8001fd4 <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fb2:	d00f      	beq.n	8001fd4 <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a43      	ldr	r2, [pc, #268]	@ (80020c4 <TIM_Base_SetConfig+0x130>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d00b      	beq.n	8001fd4 <TIM_Base_SetConfig+0x40>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a42      	ldr	r2, [pc, #264]	@ (80020c8 <TIM_Base_SetConfig+0x134>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d007      	beq.n	8001fd4 <TIM_Base_SetConfig+0x40>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a41      	ldr	r2, [pc, #260]	@ (80020cc <TIM_Base_SetConfig+0x138>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d003      	beq.n	8001fd4 <TIM_Base_SetConfig+0x40>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a40      	ldr	r2, [pc, #256]	@ (80020d0 <TIM_Base_SetConfig+0x13c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d108      	bne.n	8001fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a35      	ldr	r2, [pc, #212]	@ (80020c0 <TIM_Base_SetConfig+0x12c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d02b      	beq.n	8002046 <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff4:	d027      	beq.n	8002046 <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a32      	ldr	r2, [pc, #200]	@ (80020c4 <TIM_Base_SetConfig+0x130>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d023      	beq.n	8002046 <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a31      	ldr	r2, [pc, #196]	@ (80020c8 <TIM_Base_SetConfig+0x134>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01f      	beq.n	8002046 <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a30      	ldr	r2, [pc, #192]	@ (80020cc <TIM_Base_SetConfig+0x138>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d01b      	beq.n	8002046 <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a2f      	ldr	r2, [pc, #188]	@ (80020d0 <TIM_Base_SetConfig+0x13c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d017      	beq.n	8002046 <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a2e      	ldr	r2, [pc, #184]	@ (80020d4 <TIM_Base_SetConfig+0x140>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a2d      	ldr	r2, [pc, #180]	@ (80020d8 <TIM_Base_SetConfig+0x144>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00f      	beq.n	8002046 <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a2c      	ldr	r2, [pc, #176]	@ (80020dc <TIM_Base_SetConfig+0x148>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00b      	beq.n	8002046 <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a2b      	ldr	r2, [pc, #172]	@ (80020e0 <TIM_Base_SetConfig+0x14c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a2a      	ldr	r2, [pc, #168]	@ (80020e4 <TIM_Base_SetConfig+0x150>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d003      	beq.n	8002046 <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a29      	ldr	r2, [pc, #164]	@ (80020e8 <TIM_Base_SetConfig+0x154>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d108      	bne.n	8002058 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800204c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4313      	orrs	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a10      	ldr	r2, [pc, #64]	@ (80020c0 <TIM_Base_SetConfig+0x12c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d003      	beq.n	800208c <TIM_Base_SetConfig+0xf8>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <TIM_Base_SetConfig+0x13c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d103      	bne.n	8002094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d105      	bne.n	80020b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f023 0201 	bic.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	611a      	str	r2, [r3, #16]
  }
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40010000 	.word	0x40010000
 80020c4:	40000400 	.word	0x40000400
 80020c8:	40000800 	.word	0x40000800
 80020cc:	40000c00 	.word	0x40000c00
 80020d0:	40010400 	.word	0x40010400
 80020d4:	40014000 	.word	0x40014000
 80020d8:	40014400 	.word	0x40014400
 80020dc:	40014800 	.word	0x40014800
 80020e0:	40001800 	.word	0x40001800
 80020e4:	40001c00 	.word	0x40001c00
 80020e8:	40002000 	.word	0x40002000

080020ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e042      	b.n	80021ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe fc28 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2224      	movs	r2, #36	@ 0x24
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f973 	bl	8002444 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800216c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800217c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800218c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	@ 0x28
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d175      	bne.n	80022c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <HAL_UART_Transmit+0x2c>
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e06e      	b.n	80022c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2221      	movs	r2, #33	@ 0x21
 80021ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021f2:	f7fe fd21 	bl	8000c38 <HAL_GetTick>
 80021f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	88fa      	ldrh	r2, [r7, #6]
 80021fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800220c:	d108      	bne.n	8002220 <HAL_UART_Transmit+0x6c>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d104      	bne.n	8002220 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	e003      	b.n	8002228 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002228:	e02e      	b.n	8002288 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2200      	movs	r2, #0
 8002232:	2180      	movs	r1, #128	@ 0x80
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f848 	bl	80022ca <UART_WaitOnFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e03a      	b.n	80022c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10b      	bne.n	800226a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002260:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	3302      	adds	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	e007      	b.n	800227a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	781a      	ldrb	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	3301      	adds	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1cb      	bne.n	800222a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2200      	movs	r2, #0
 800229a:	2140      	movs	r1, #64	@ 0x40
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f814 	bl	80022ca <UART_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e006      	b.n	80022c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	e000      	b.n	80022c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80022c0:	2302      	movs	r3, #2
  }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3720      	adds	r7, #32
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	4613      	mov	r3, r2
 80022d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022da:	e03b      	b.n	8002354 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e2:	d037      	beq.n	8002354 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e4:	f7fe fca8 	bl	8000c38 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	6a3a      	ldr	r2, [r7, #32]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d302      	bcc.n	80022fa <UART_WaitOnFlagUntilTimeout+0x30>
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e03a      	b.n	8002374 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d023      	beq.n	8002354 <UART_WaitOnFlagUntilTimeout+0x8a>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b80      	cmp	r3, #128	@ 0x80
 8002310:	d020      	beq.n	8002354 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b40      	cmp	r3, #64	@ 0x40
 8002316:	d01d      	beq.n	8002354 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b08      	cmp	r3, #8
 8002324:	d116      	bne.n	8002354 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 f81d 	bl	800237c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2208      	movs	r2, #8
 8002346:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e00f      	b.n	8002374 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4013      	ands	r3, r2
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	429a      	cmp	r2, r3
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	429a      	cmp	r2, r3
 8002370:	d0b4      	beq.n	80022dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800237c:	b480      	push	{r7}
 800237e:	b095      	sub	sp, #84	@ 0x54
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	330c      	adds	r3, #12
 800238a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800238c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238e:	e853 3f00 	ldrex	r3, [r3]
 8002392:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002396:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800239a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	330c      	adds	r3, #12
 80023a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80023a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80023aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023ac:	e841 2300 	strex	r3, r2, [r1]
 80023b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80023b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e5      	bne.n	8002384 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3314      	adds	r3, #20
 80023be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	e853 3f00 	ldrex	r3, [r3]
 80023c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3314      	adds	r3, #20
 80023d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023e0:	e841 2300 	strex	r3, r2, [r1]
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1e5      	bne.n	80023b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d119      	bne.n	8002428 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	330c      	adds	r3, #12
 80023fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	e853 3f00 	ldrex	r3, [r3]
 8002402:	60bb      	str	r3, [r7, #8]
   return(result);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f023 0310 	bic.w	r3, r3, #16
 800240a:	647b      	str	r3, [r7, #68]	@ 0x44
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	330c      	adds	r3, #12
 8002412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002414:	61ba      	str	r2, [r7, #24]
 8002416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002418:	6979      	ldr	r1, [r7, #20]
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	e841 2300 	strex	r3, r2, [r1]
 8002420:	613b      	str	r3, [r7, #16]
   return(result);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1e5      	bne.n	80023f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002436:	bf00      	nop
 8002438:	3754      	adds	r7, #84	@ 0x54
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002448:	b0c0      	sub	sp, #256	@ 0x100
 800244a:	af00      	add	r7, sp, #0
 800244c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800245c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002460:	68d9      	ldr	r1, [r3, #12]
 8002462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	ea40 0301 	orr.w	r3, r0, r1
 800246c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800246e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	431a      	orrs	r2, r3
 800247c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	431a      	orrs	r2, r3
 8002484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800249c:	f021 010c 	bic.w	r1, r1, #12
 80024a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024aa:	430b      	orrs	r3, r1
 80024ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80024ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024be:	6999      	ldr	r1, [r3, #24]
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	ea40 0301 	orr.w	r3, r0, r1
 80024ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	4b8f      	ldr	r3, [pc, #572]	@ (8002710 <UART_SetConfig+0x2cc>)
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d005      	beq.n	80024e4 <UART_SetConfig+0xa0>
 80024d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4b8d      	ldr	r3, [pc, #564]	@ (8002714 <UART_SetConfig+0x2d0>)
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d104      	bne.n	80024ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024e4:	f7ff fb2e 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 80024e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80024ec:	e003      	b.n	80024f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024ee:	f7ff fb15 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 80024f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002500:	f040 810c 	bne.w	800271c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002508:	2200      	movs	r2, #0
 800250a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800250e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002512:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002516:	4622      	mov	r2, r4
 8002518:	462b      	mov	r3, r5
 800251a:	1891      	adds	r1, r2, r2
 800251c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800251e:	415b      	adcs	r3, r3
 8002520:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002522:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002526:	4621      	mov	r1, r4
 8002528:	eb12 0801 	adds.w	r8, r2, r1
 800252c:	4629      	mov	r1, r5
 800252e:	eb43 0901 	adc.w	r9, r3, r1
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800253e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002546:	4690      	mov	r8, r2
 8002548:	4699      	mov	r9, r3
 800254a:	4623      	mov	r3, r4
 800254c:	eb18 0303 	adds.w	r3, r8, r3
 8002550:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002554:	462b      	mov	r3, r5
 8002556:	eb49 0303 	adc.w	r3, r9, r3
 800255a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800255e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800256a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800256e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002572:	460b      	mov	r3, r1
 8002574:	18db      	adds	r3, r3, r3
 8002576:	653b      	str	r3, [r7, #80]	@ 0x50
 8002578:	4613      	mov	r3, r2
 800257a:	eb42 0303 	adc.w	r3, r2, r3
 800257e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002580:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002584:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002588:	f7fd fe3a 	bl	8000200 <__aeabi_uldivmod>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4b61      	ldr	r3, [pc, #388]	@ (8002718 <UART_SetConfig+0x2d4>)
 8002592:	fba3 2302 	umull	r2, r3, r3, r2
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	011c      	lsls	r4, r3, #4
 800259a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800259e:	2200      	movs	r2, #0
 80025a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80025a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80025ac:	4642      	mov	r2, r8
 80025ae:	464b      	mov	r3, r9
 80025b0:	1891      	adds	r1, r2, r2
 80025b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80025b4:	415b      	adcs	r3, r3
 80025b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025bc:	4641      	mov	r1, r8
 80025be:	eb12 0a01 	adds.w	sl, r2, r1
 80025c2:	4649      	mov	r1, r9
 80025c4:	eb43 0b01 	adc.w	fp, r3, r1
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025dc:	4692      	mov	sl, r2
 80025de:	469b      	mov	fp, r3
 80025e0:	4643      	mov	r3, r8
 80025e2:	eb1a 0303 	adds.w	r3, sl, r3
 80025e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025ea:	464b      	mov	r3, r9
 80025ec:	eb4b 0303 	adc.w	r3, fp, r3
 80025f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80025f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002600:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002604:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002608:	460b      	mov	r3, r1
 800260a:	18db      	adds	r3, r3, r3
 800260c:	643b      	str	r3, [r7, #64]	@ 0x40
 800260e:	4613      	mov	r3, r2
 8002610:	eb42 0303 	adc.w	r3, r2, r3
 8002614:	647b      	str	r3, [r7, #68]	@ 0x44
 8002616:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800261a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800261e:	f7fd fdef 	bl	8000200 <__aeabi_uldivmod>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4611      	mov	r1, r2
 8002628:	4b3b      	ldr	r3, [pc, #236]	@ (8002718 <UART_SetConfig+0x2d4>)
 800262a:	fba3 2301 	umull	r2, r3, r3, r1
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	2264      	movs	r2, #100	@ 0x64
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	1acb      	subs	r3, r1, r3
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800263e:	4b36      	ldr	r3, [pc, #216]	@ (8002718 <UART_SetConfig+0x2d4>)
 8002640:	fba3 2302 	umull	r2, r3, r3, r2
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800264c:	441c      	add	r4, r3
 800264e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002652:	2200      	movs	r2, #0
 8002654:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002658:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800265c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002660:	4642      	mov	r2, r8
 8002662:	464b      	mov	r3, r9
 8002664:	1891      	adds	r1, r2, r2
 8002666:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002668:	415b      	adcs	r3, r3
 800266a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800266c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002670:	4641      	mov	r1, r8
 8002672:	1851      	adds	r1, r2, r1
 8002674:	6339      	str	r1, [r7, #48]	@ 0x30
 8002676:	4649      	mov	r1, r9
 8002678:	414b      	adcs	r3, r1
 800267a:	637b      	str	r3, [r7, #52]	@ 0x34
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002688:	4659      	mov	r1, fp
 800268a:	00cb      	lsls	r3, r1, #3
 800268c:	4651      	mov	r1, sl
 800268e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002692:	4651      	mov	r1, sl
 8002694:	00ca      	lsls	r2, r1, #3
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	4603      	mov	r3, r0
 800269c:	4642      	mov	r2, r8
 800269e:	189b      	adds	r3, r3, r2
 80026a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026a4:	464b      	mov	r3, r9
 80026a6:	460a      	mov	r2, r1
 80026a8:	eb42 0303 	adc.w	r3, r2, r3
 80026ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80026bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80026c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80026c4:	460b      	mov	r3, r1
 80026c6:	18db      	adds	r3, r3, r3
 80026c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026ca:	4613      	mov	r3, r2
 80026cc:	eb42 0303 	adc.w	r3, r2, r3
 80026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80026da:	f7fd fd91 	bl	8000200 <__aeabi_uldivmod>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002718 <UART_SetConfig+0x2d4>)
 80026e4:	fba3 1302 	umull	r1, r3, r3, r2
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	2164      	movs	r1, #100	@ 0x64
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	3332      	adds	r3, #50	@ 0x32
 80026f6:	4a08      	ldr	r2, [pc, #32]	@ (8002718 <UART_SetConfig+0x2d4>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	f003 0207 	and.w	r2, r3, #7
 8002702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4422      	add	r2, r4
 800270a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800270c:	e106      	b.n	800291c <UART_SetConfig+0x4d8>
 800270e:	bf00      	nop
 8002710:	40011000 	.word	0x40011000
 8002714:	40011400 	.word	0x40011400
 8002718:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800271c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002720:	2200      	movs	r2, #0
 8002722:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002726:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800272a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800272e:	4642      	mov	r2, r8
 8002730:	464b      	mov	r3, r9
 8002732:	1891      	adds	r1, r2, r2
 8002734:	6239      	str	r1, [r7, #32]
 8002736:	415b      	adcs	r3, r3
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24
 800273a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800273e:	4641      	mov	r1, r8
 8002740:	1854      	adds	r4, r2, r1
 8002742:	4649      	mov	r1, r9
 8002744:	eb43 0501 	adc.w	r5, r3, r1
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	00eb      	lsls	r3, r5, #3
 8002752:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002756:	00e2      	lsls	r2, r4, #3
 8002758:	4614      	mov	r4, r2
 800275a:	461d      	mov	r5, r3
 800275c:	4643      	mov	r3, r8
 800275e:	18e3      	adds	r3, r4, r3
 8002760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002764:	464b      	mov	r3, r9
 8002766:	eb45 0303 	adc.w	r3, r5, r3
 800276a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800276e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800277a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800278a:	4629      	mov	r1, r5
 800278c:	008b      	lsls	r3, r1, #2
 800278e:	4621      	mov	r1, r4
 8002790:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002794:	4621      	mov	r1, r4
 8002796:	008a      	lsls	r2, r1, #2
 8002798:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800279c:	f7fd fd30 	bl	8000200 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4b60      	ldr	r3, [pc, #384]	@ (8002928 <UART_SetConfig+0x4e4>)
 80027a6:	fba3 2302 	umull	r2, r3, r3, r2
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	011c      	lsls	r4, r3, #4
 80027ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027b2:	2200      	movs	r2, #0
 80027b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80027c0:	4642      	mov	r2, r8
 80027c2:	464b      	mov	r3, r9
 80027c4:	1891      	adds	r1, r2, r2
 80027c6:	61b9      	str	r1, [r7, #24]
 80027c8:	415b      	adcs	r3, r3
 80027ca:	61fb      	str	r3, [r7, #28]
 80027cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027d0:	4641      	mov	r1, r8
 80027d2:	1851      	adds	r1, r2, r1
 80027d4:	6139      	str	r1, [r7, #16]
 80027d6:	4649      	mov	r1, r9
 80027d8:	414b      	adcs	r3, r1
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027e8:	4659      	mov	r1, fp
 80027ea:	00cb      	lsls	r3, r1, #3
 80027ec:	4651      	mov	r1, sl
 80027ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027f2:	4651      	mov	r1, sl
 80027f4:	00ca      	lsls	r2, r1, #3
 80027f6:	4610      	mov	r0, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	4603      	mov	r3, r0
 80027fc:	4642      	mov	r2, r8
 80027fe:	189b      	adds	r3, r3, r2
 8002800:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002804:	464b      	mov	r3, r9
 8002806:	460a      	mov	r2, r1
 8002808:	eb42 0303 	adc.w	r3, r2, r3
 800280c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	67bb      	str	r3, [r7, #120]	@ 0x78
 800281a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002828:	4649      	mov	r1, r9
 800282a:	008b      	lsls	r3, r1, #2
 800282c:	4641      	mov	r1, r8
 800282e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002832:	4641      	mov	r1, r8
 8002834:	008a      	lsls	r2, r1, #2
 8002836:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800283a:	f7fd fce1 	bl	8000200 <__aeabi_uldivmod>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4611      	mov	r1, r2
 8002844:	4b38      	ldr	r3, [pc, #224]	@ (8002928 <UART_SetConfig+0x4e4>)
 8002846:	fba3 2301 	umull	r2, r3, r3, r1
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	2264      	movs	r2, #100	@ 0x64
 800284e:	fb02 f303 	mul.w	r3, r2, r3
 8002852:	1acb      	subs	r3, r1, r3
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	3332      	adds	r3, #50	@ 0x32
 8002858:	4a33      	ldr	r2, [pc, #204]	@ (8002928 <UART_SetConfig+0x4e4>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002864:	441c      	add	r4, r3
 8002866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800286a:	2200      	movs	r2, #0
 800286c:	673b      	str	r3, [r7, #112]	@ 0x70
 800286e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002870:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002874:	4642      	mov	r2, r8
 8002876:	464b      	mov	r3, r9
 8002878:	1891      	adds	r1, r2, r2
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	415b      	adcs	r3, r3
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002884:	4641      	mov	r1, r8
 8002886:	1851      	adds	r1, r2, r1
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	4649      	mov	r1, r9
 800288c:	414b      	adcs	r3, r1
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800289c:	4659      	mov	r1, fp
 800289e:	00cb      	lsls	r3, r1, #3
 80028a0:	4651      	mov	r1, sl
 80028a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028a6:	4651      	mov	r1, sl
 80028a8:	00ca      	lsls	r2, r1, #3
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	4603      	mov	r3, r0
 80028b0:	4642      	mov	r2, r8
 80028b2:	189b      	adds	r3, r3, r2
 80028b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028b6:	464b      	mov	r3, r9
 80028b8:	460a      	mov	r2, r1
 80028ba:	eb42 0303 	adc.w	r3, r2, r3
 80028be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80028ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80028d8:	4649      	mov	r1, r9
 80028da:	008b      	lsls	r3, r1, #2
 80028dc:	4641      	mov	r1, r8
 80028de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028e2:	4641      	mov	r1, r8
 80028e4:	008a      	lsls	r2, r1, #2
 80028e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80028ea:	f7fd fc89 	bl	8000200 <__aeabi_uldivmod>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002928 <UART_SetConfig+0x4e4>)
 80028f4:	fba3 1302 	umull	r1, r3, r3, r2
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	2164      	movs	r1, #100	@ 0x64
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	3332      	adds	r3, #50	@ 0x32
 8002906:	4a08      	ldr	r2, [pc, #32]	@ (8002928 <UART_SetConfig+0x4e4>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	f003 020f 	and.w	r2, r3, #15
 8002912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4422      	add	r2, r4
 800291a:	609a      	str	r2, [r3, #8]
}
 800291c:	bf00      	nop
 800291e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002922:	46bd      	mov	sp, r7
 8002924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002928:	51eb851f 	.word	0x51eb851f

0800292c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800293a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800293e:	2b84      	cmp	r3, #132	@ 0x84
 8002940:	d005      	beq.n	800294e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002942:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	3303      	adds	r3, #3
 800294c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800294e:	68fb      	ldr	r3, [r7, #12]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002962:	f3ef 8305 	mrs	r3, IPSR
 8002966:	607b      	str	r3, [r7, #4]
  return(result);
 8002968:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800296a:	2b00      	cmp	r3, #0
 800296c:	bf14      	ite	ne
 800296e:	2301      	movne	r3, #1
 8002970:	2300      	moveq	r3, #0
 8002972:	b2db      	uxtb	r3, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002984:	f001 f942 	bl	8003c0c <vTaskStartScheduler>
  
  return osOK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	bd80      	pop	{r7, pc}

0800298e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800298e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002990:	b089      	sub	sp, #36	@ 0x24
 8002992:	af04      	add	r7, sp, #16
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <osThreadCreate+0x54>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01c      	beq.n	80029e2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685c      	ldr	r4, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691e      	ldr	r6, [r3, #16]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ffb6 	bl	800292c <makeFreeRtosPriority>
 80029c0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029ca:	9202      	str	r2, [sp, #8]
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	9100      	str	r1, [sp, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	4632      	mov	r2, r6
 80029d4:	4629      	mov	r1, r5
 80029d6:	4620      	mov	r0, r4
 80029d8:	f000 ff32 	bl	8003840 <xTaskCreateStatic>
 80029dc:	4603      	mov	r3, r0
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	e01c      	b.n	8002a1c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685c      	ldr	r4, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029ee:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff98 	bl	800292c <makeFreeRtosPriority>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f107 030c 	add.w	r3, r7, #12
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	9200      	str	r2, [sp, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	4632      	mov	r2, r6
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f000 ff77 	bl	8003900 <xTaskCreate>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d001      	beq.n	8002a1c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e000      	b.n	8002a1e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <osDelay+0x16>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	e000      	b.n	8002a3e <osDelay+0x18>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f001 f8ae 	bl	8003ba0 <vTaskDelay>
  
  return osOK;
 8002a44:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af02      	add	r7, sp, #8
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00f      	beq.n	8002a80 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d10a      	bne.n	8002a7c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	9200      	str	r2, [sp, #0]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	2001      	movs	r0, #1
 8002a74:	f000 f9c0 	bl	8002df8 <xQueueGenericCreateStatic>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	e016      	b.n	8002aaa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e014      	b.n	8002aaa <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d110      	bne.n	8002aa8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002a86:	2203      	movs	r2, #3
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f000 fa31 	bl	8002ef2 <xQueueGenericCreate>
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <osSemaphoreCreate+0x56>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fa82 	bl	8002fa8 <xQueueGenericSend>
      return sema;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	e000      	b.n	8002aaa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002aa8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002ac8:	2380      	movs	r3, #128	@ 0x80
 8002aca:	e03a      	b.n	8002b42 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad6:	d103      	bne.n	8002ae0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e009      	b.n	8002af4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d006      	beq.n	8002af4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <osSemaphoreWait+0x40>
      ticks = 1;
 8002af0:	2301      	movs	r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002af4:	f7ff ff32 	bl	800295c <inHandlerMode>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d017      	beq.n	8002b2e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002afe:	f107 0308 	add.w	r3, r7, #8
 8002b02:	461a      	mov	r2, r3
 8002b04:	2100      	movs	r1, #0
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fcf0 	bl	80034ec <xQueueReceiveFromISR>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d001      	beq.n	8002b16 <osSemaphoreWait+0x62>
      return osErrorOS;
 8002b12:	23ff      	movs	r3, #255	@ 0xff
 8002b14:	e015      	b.n	8002b42 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d011      	beq.n	8002b40 <osSemaphoreWait+0x8c>
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b4c <osSemaphoreWait+0x98>)
 8002b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	e008      	b.n	8002b40 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002b2e:	68f9      	ldr	r1, [r7, #12]
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fbcb 	bl	80032cc <xQueueSemaphoreTake>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d001      	beq.n	8002b40 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002b3c:	23ff      	movs	r3, #255	@ 0xff
 8002b3e:	e000      	b.n	8002b42 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	e000ed04 	.word	0xe000ed04

08002b50 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002b60:	f7ff fefc 	bl	800295c <inHandlerMode>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d016      	beq.n	8002b98 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002b6a:	f107 0308 	add.w	r3, r7, #8
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fb1b 	bl	80031ac <xQueueGiveFromISR>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d001      	beq.n	8002b80 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002b7c:	23ff      	movs	r3, #255	@ 0xff
 8002b7e:	e017      	b.n	8002bb0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d013      	beq.n	8002bae <osSemaphoreRelease+0x5e>
 8002b86:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <osSemaphoreRelease+0x68>)
 8002b88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	e00a      	b.n	8002bae <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002b98:	2300      	movs	r3, #0
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fa02 	bl	8002fa8 <xQueueGenericSend>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d001      	beq.n	8002bae <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002baa:	23ff      	movs	r3, #255	@ 0xff
 8002bac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002bae:	68fb      	ldr	r3, [r7, #12]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	e000ed04 	.word	0xe000ed04

08002bbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f103 0208 	add.w	r2, r3, #8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f103 0208 	add.w	r2, r3, #8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f103 0208 	add.w	r2, r3, #8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c16:	b480      	push	{r7}
 8002c18:	b085      	sub	sp, #20
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	601a      	str	r2, [r3, #0]
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b085      	sub	sp, #20
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d103      	bne.n	8002c7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e00c      	b.n	8002c98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3308      	adds	r3, #8
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	e002      	b.n	8002c8c <vListInsert+0x2e>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d2f6      	bcs.n	8002c86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	601a      	str	r2, [r3, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6892      	ldr	r2, [r2, #8]
 8002ce6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6852      	ldr	r2, [r2, #4]
 8002cf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d103      	bne.n	8002d04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	1e5a      	subs	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d50:	f001 fed2 	bl	8004af8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d5c:	68f9      	ldr	r1, [r7, #12]
 8002d5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	441a      	add	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d80:	3b01      	subs	r3, #1
 8002d82:	68f9      	ldr	r1, [r7, #12]
 8002d84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	441a      	add	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	22ff      	movs	r2, #255	@ 0xff
 8002d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	22ff      	movs	r2, #255	@ 0xff
 8002d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d114      	bne.n	8002dd0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01a      	beq.n	8002de4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	3310      	adds	r3, #16
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 f984 	bl	80040c0 <xTaskRemoveFromEventList>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d012      	beq.n	8002de4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002df4 <xQueueGenericReset+0xd0>)
 8002dc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	e009      	b.n	8002de4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3310      	adds	r3, #16
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fef1 	bl	8002bbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3324      	adds	r3, #36	@ 0x24
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff feec 	bl	8002bbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002de4:	f001 feba 	bl	8004b5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002de8:	2301      	movs	r3, #1
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	e000ed04 	.word	0xe000ed04

08002df8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08e      	sub	sp, #56	@ 0x38
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e1e:	bf00      	nop
 8002e20:	bf00      	nop
 8002e22:	e7fd      	b.n	8002e20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10b      	bne.n	8002e42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	e7fd      	b.n	8002e3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <xQueueGenericCreateStatic+0x56>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <xQueueGenericCreateStatic+0x5a>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <xQueueGenericCreateStatic+0x5c>
 8002e52:	2300      	movs	r3, #0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10b      	bne.n	8002e70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	623b      	str	r3, [r7, #32]
}
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
 8002e6e:	e7fd      	b.n	8002e6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <xQueueGenericCreateStatic+0x84>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <xQueueGenericCreateStatic+0x88>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <xQueueGenericCreateStatic+0x8a>
 8002e80:	2300      	movs	r3, #0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10b      	bne.n	8002e9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	61fb      	str	r3, [r7, #28]
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	e7fd      	b.n	8002e9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e9e:	2348      	movs	r3, #72	@ 0x48
 8002ea0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b48      	cmp	r3, #72	@ 0x48
 8002ea6:	d00b      	beq.n	8002ec0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	61bb      	str	r3, [r7, #24]
}
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ec0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00d      	beq.n	8002ee8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ed4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f840 	bl	8002f68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3730      	adds	r7, #48	@ 0x30
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b08a      	sub	sp, #40	@ 0x28
 8002ef6:	af02      	add	r7, sp, #8
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	4613      	mov	r3, r2
 8002efe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10b      	bne.n	8002f1e <xQueueGenericCreate+0x2c>
	__asm volatile
 8002f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f0a:	f383 8811 	msr	BASEPRI, r3
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	613b      	str	r3, [r7, #16]
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	e7fd      	b.n	8002f1a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	3348      	adds	r3, #72	@ 0x48
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f001 ff05 	bl	8004d3c <pvPortMalloc>
 8002f32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d011      	beq.n	8002f5e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	3348      	adds	r3, #72	@ 0x48
 8002f42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f4c:	79fa      	ldrb	r2, [r7, #7]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	4613      	mov	r3, r2
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f805 	bl	8002f68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f5e:	69bb      	ldr	r3, [r7, #24]
	}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3720      	adds	r7, #32
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d103      	bne.n	8002f84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e002      	b.n	8002f8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f96:	2101      	movs	r1, #1
 8002f98:	69b8      	ldr	r0, [r7, #24]
 8002f9a:	f7ff fec3 	bl	8002d24 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f9e:	bf00      	nop
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08e      	sub	sp, #56	@ 0x38
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10b      	bne.n	8002fdc <xQueueGenericSend+0x34>
	__asm volatile
 8002fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc8:	f383 8811 	msr	BASEPRI, r3
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002fd6:	bf00      	nop
 8002fd8:	bf00      	nop
 8002fda:	e7fd      	b.n	8002fd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <xQueueGenericSend+0x42>
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <xQueueGenericSend+0x46>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <xQueueGenericSend+0x48>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10b      	bne.n	800300c <xQueueGenericSend+0x64>
	__asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003006:	bf00      	nop
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d103      	bne.n	800301a <xQueueGenericSend+0x72>
 8003012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <xQueueGenericSend+0x76>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <xQueueGenericSend+0x78>
 800301e:	2300      	movs	r3, #0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10b      	bne.n	800303c <xQueueGenericSend+0x94>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	623b      	str	r3, [r7, #32]
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800303c:	f001 fa06 	bl	800444c <xTaskGetSchedulerState>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d102      	bne.n	800304c <xQueueGenericSend+0xa4>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <xQueueGenericSend+0xa8>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <xQueueGenericSend+0xaa>
 8003050:	2300      	movs	r3, #0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10b      	bne.n	800306e <xQueueGenericSend+0xc6>
	__asm volatile
 8003056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800305a:	f383 8811 	msr	BASEPRI, r3
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	61fb      	str	r3, [r7, #28]
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	e7fd      	b.n	800306a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800306e:	f001 fd43 	bl	8004af8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003074:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <xQueueGenericSend+0xdc>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d129      	bne.n	80030d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800308a:	f000 fac9 	bl	8003620 <prvCopyDataToQueue>
 800308e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	2b00      	cmp	r3, #0
 8003096:	d010      	beq.n	80030ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309a:	3324      	adds	r3, #36	@ 0x24
 800309c:	4618      	mov	r0, r3
 800309e:	f001 f80f 	bl	80040c0 <xTaskRemoveFromEventList>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030a8:	4b3f      	ldr	r3, [pc, #252]	@ (80031a8 <xQueueGenericSend+0x200>)
 80030aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	e00a      	b.n	80030d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030c0:	4b39      	ldr	r3, [pc, #228]	@ (80031a8 <xQueueGenericSend+0x200>)
 80030c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030d0:	f001 fd44 	bl	8004b5c <vPortExitCritical>
				return pdPASS;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e063      	b.n	80031a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030de:	f001 fd3d 	bl	8004b5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	e05c      	b.n	80031a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d106      	bne.n	80030fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 f849 	bl	8004188 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030f6:	2301      	movs	r3, #1
 80030f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030fa:	f001 fd2f 	bl	8004b5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030fe:	f000 fdef 	bl	8003ce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003102:	f001 fcf9 	bl	8004af8 <vPortEnterCritical>
 8003106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003108:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800310c:	b25b      	sxtb	r3, r3
 800310e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003112:	d103      	bne.n	800311c <xQueueGenericSend+0x174>
 8003114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800311c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003122:	b25b      	sxtb	r3, r3
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003128:	d103      	bne.n	8003132 <xQueueGenericSend+0x18a>
 800312a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003132:	f001 fd13 	bl	8004b5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003136:	1d3a      	adds	r2, r7, #4
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f001 f838 	bl	80041b4 <xTaskCheckForTimeOut>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d124      	bne.n	8003194 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800314a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800314c:	f000 fb60 	bl	8003810 <prvIsQueueFull>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d018      	beq.n	8003188 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003158:	3310      	adds	r3, #16
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f000 ff88 	bl	8004074 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003164:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003166:	f000 faeb 	bl	8003740 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800316a:	f000 fdc7 	bl	8003cfc <xTaskResumeAll>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	f47f af7c 	bne.w	800306e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003176:	4b0c      	ldr	r3, [pc, #48]	@ (80031a8 <xQueueGenericSend+0x200>)
 8003178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	e772      	b.n	800306e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003188:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800318a:	f000 fad9 	bl	8003740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800318e:	f000 fdb5 	bl	8003cfc <xTaskResumeAll>
 8003192:	e76c      	b.n	800306e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003194:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003196:	f000 fad3 	bl	8003740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800319a:	f000 fdaf 	bl	8003cfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800319e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3738      	adds	r7, #56	@ 0x38
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	e000ed04 	.word	0xe000ed04

080031ac <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08e      	sub	sp, #56	@ 0x38
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80031ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10b      	bne.n	80031d8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	623b      	str	r3, [r7, #32]
}
 80031d2:	bf00      	nop
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80031d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80031e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	61fb      	str	r3, [r7, #28]
}
 80031f2:	bf00      	nop
 80031f4:	bf00      	nop
 80031f6:	e7fd      	b.n	80031f4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80031f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d103      	bne.n	8003208 <xQueueGiveFromISR+0x5c>
 8003200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <xQueueGiveFromISR+0x60>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <xQueueGiveFromISR+0x62>
 800320c:	2300      	movs	r3, #0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10b      	bne.n	800322a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8003212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	61bb      	str	r3, [r7, #24]
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop
 8003228:	e7fd      	b.n	8003226 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800322a:	f001 fd45 	bl	8004cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800322e:	f3ef 8211 	mrs	r2, BASEPRI
 8003232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	617a      	str	r2, [r7, #20]
 8003244:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003246:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800324a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003254:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003256:	429a      	cmp	r2, r3
 8003258:	d22b      	bcs.n	80032b2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800325a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800326c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d112      	bne.n	800329c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	2b00      	cmp	r3, #0
 800327c:	d016      	beq.n	80032ac <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800327e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003280:	3324      	adds	r3, #36	@ 0x24
 8003282:	4618      	mov	r0, r3
 8003284:	f000 ff1c 	bl	80040c0 <xTaskRemoveFromEventList>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00e      	beq.n	80032ac <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00b      	beq.n	80032ac <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2201      	movs	r2, #1
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e007      	b.n	80032ac <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800329c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032a0:	3301      	adds	r3, #1
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	b25a      	sxtb	r2, r3
 80032a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80032ac:	2301      	movs	r3, #1
 80032ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80032b0:	e001      	b.n	80032b6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80032b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3738      	adds	r7, #56	@ 0x38
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08e      	sub	sp, #56	@ 0x38
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80032de:	2300      	movs	r3, #0
 80032e0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10b      	bne.n	8003300 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80032e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	623b      	str	r3, [r7, #32]
}
 80032fa:	bf00      	nop
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00b      	beq.n	8003320 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	61fb      	str	r3, [r7, #28]
}
 800331a:	bf00      	nop
 800331c:	bf00      	nop
 800331e:	e7fd      	b.n	800331c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003320:	f001 f894 	bl	800444c <xTaskGetSchedulerState>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d102      	bne.n	8003330 <xQueueSemaphoreTake+0x64>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <xQueueSemaphoreTake+0x68>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <xQueueSemaphoreTake+0x6a>
 8003334:	2300      	movs	r3, #0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10b      	bne.n	8003352 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800333a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	61bb      	str	r3, [r7, #24]
}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	e7fd      	b.n	800334e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003352:	f001 fbd1 	bl	8004af8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800335c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335e:	2b00      	cmp	r3, #0
 8003360:	d024      	beq.n	80033ac <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003364:	1e5a      	subs	r2, r3, #1
 8003366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003368:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800336a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d104      	bne.n	800337c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003372:	f001 fa17 	bl	80047a4 <pvTaskIncrementMutexHeldCount>
 8003376:	4602      	mov	r2, r0
 8003378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800337c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00f      	beq.n	80033a4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003386:	3310      	adds	r3, #16
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fe99 	bl	80040c0 <xTaskRemoveFromEventList>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003394:	4b54      	ldr	r3, [pc, #336]	@ (80034e8 <xQueueSemaphoreTake+0x21c>)
 8003396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033a4:	f001 fbda 	bl	8004b5c <vPortExitCritical>
				return pdPASS;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e098      	b.n	80034de <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d112      	bne.n	80033d8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80033b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00b      	beq.n	80033d0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	617b      	str	r3, [r7, #20]
}
 80033ca:	bf00      	nop
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80033d0:	f001 fbc4 	bl	8004b5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e082      	b.n	80034de <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033de:	f107 030c 	add.w	r3, r7, #12
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fed0 	bl	8004188 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033e8:	2301      	movs	r3, #1
 80033ea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033ec:	f001 fbb6 	bl	8004b5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033f0:	f000 fc76 	bl	8003ce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033f4:	f001 fb80 	bl	8004af8 <vPortEnterCritical>
 80033f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033fe:	b25b      	sxtb	r3, r3
 8003400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003404:	d103      	bne.n	800340e <xQueueSemaphoreTake+0x142>
 8003406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800340e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003410:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003414:	b25b      	sxtb	r3, r3
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d103      	bne.n	8003424 <xQueueSemaphoreTake+0x158>
 800341c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003424:	f001 fb9a 	bl	8004b5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003428:	463a      	mov	r2, r7
 800342a:	f107 030c 	add.w	r3, r7, #12
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f000 febf 	bl	80041b4 <xTaskCheckForTimeOut>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d132      	bne.n	80034a2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800343c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800343e:	f000 f9d1 	bl	80037e4 <prvIsQueueEmpty>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d026      	beq.n	8003496 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d109      	bne.n	8003464 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003450:	f001 fb52 	bl	8004af8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4618      	mov	r0, r3
 800345a:	f001 f815 	bl	8004488 <xTaskPriorityInherit>
 800345e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003460:	f001 fb7c 	bl	8004b5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003466:	3324      	adds	r3, #36	@ 0x24
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fe01 	bl	8004074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003472:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003474:	f000 f964 	bl	8003740 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003478:	f000 fc40 	bl	8003cfc <xTaskResumeAll>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	f47f af67 	bne.w	8003352 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003484:	4b18      	ldr	r3, [pc, #96]	@ (80034e8 <xQueueSemaphoreTake+0x21c>)
 8003486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	e75d      	b.n	8003352 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003496:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003498:	f000 f952 	bl	8003740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800349c:	f000 fc2e 	bl	8003cfc <xTaskResumeAll>
 80034a0:	e757      	b.n	8003352 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80034a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034a4:	f000 f94c 	bl	8003740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034a8:	f000 fc28 	bl	8003cfc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034ae:	f000 f999 	bl	80037e4 <prvIsQueueEmpty>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f43f af4c 	beq.w	8003352 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00d      	beq.n	80034dc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80034c0:	f001 fb1a 	bl	8004af8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80034c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034c6:	f000 f893 	bl	80035f0 <prvGetDisinheritPriorityAfterTimeout>
 80034ca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80034cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 f8d6 	bl	8004684 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80034d8:	f001 fb40 	bl	8004b5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3738      	adds	r7, #56	@ 0x38
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	e000ed04 	.word	0xe000ed04

080034ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08e      	sub	sp, #56	@ 0x38
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80034fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10b      	bne.n	800351a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	623b      	str	r3, [r7, #32]
}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	e7fd      	b.n	8003516 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d103      	bne.n	8003528 <xQueueReceiveFromISR+0x3c>
 8003520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <xQueueReceiveFromISR+0x40>
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <xQueueReceiveFromISR+0x42>
 800352c:	2300      	movs	r3, #0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10b      	bne.n	800354a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	61fb      	str	r3, [r7, #28]
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	e7fd      	b.n	8003546 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800354a:	f001 fbb5 	bl	8004cb8 <vPortValidateInterruptPriority>
	__asm volatile
 800354e:	f3ef 8211 	mrs	r2, BASEPRI
 8003552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	61ba      	str	r2, [r7, #24]
 8003564:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003566:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003568:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800356a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003572:	2b00      	cmp	r3, #0
 8003574:	d02f      	beq.n	80035d6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003578:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800357c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003584:	f000 f8b6 	bl	80036f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358a:	1e5a      	subs	r2, r3, #1
 800358c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003590:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d112      	bne.n	80035c0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800359a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d016      	beq.n	80035d0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a4:	3310      	adds	r3, #16
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fd8a 	bl	80040c0 <xTaskRemoveFromEventList>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00e      	beq.n	80035d0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00b      	beq.n	80035d0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e007      	b.n	80035d0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80035c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035c4:	3301      	adds	r3, #1
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	b25a      	sxtb	r2, r3
 80035ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80035d0:	2301      	movs	r3, #1
 80035d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80035d4:	e001      	b.n	80035da <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80035da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f383 8811 	msr	BASEPRI, r3
}
 80035e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3738      	adds	r7, #56	@ 0x38
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d006      	beq.n	800360e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f1c3 0307 	rsb	r3, r3, #7
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	e001      	b.n	8003612 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003612:	68fb      	ldr	r3, [r7, #12]
	}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003634:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10d      	bne.n	800365a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d14d      	bne.n	80036e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 ff92 	bl	8004574 <xTaskPriorityDisinherit>
 8003650:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	e043      	b.n	80036e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d119      	bne.n	8003694 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6858      	ldr	r0, [r3, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	461a      	mov	r2, r3
 800366a:	68b9      	ldr	r1, [r7, #8]
 800366c:	f001 fdd8 	bl	8005220 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	441a      	add	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	d32b      	bcc.n	80036e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	e026      	b.n	80036e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68d8      	ldr	r0, [r3, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	461a      	mov	r2, r3
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	f001 fdbe 	bl	8005220 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	425b      	negs	r3, r3
 80036ae:	441a      	add	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d207      	bcs.n	80036d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	425b      	negs	r3, r3
 80036ca:	441a      	add	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d105      	bne.n	80036e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	3b01      	subs	r3, #1
 80036e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80036ea:	697b      	ldr	r3, [r7, #20]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d018      	beq.n	8003738 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	441a      	add	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	429a      	cmp	r2, r3
 800371e:	d303      	bcc.n	8003728 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68d9      	ldr	r1, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	461a      	mov	r2, r3
 8003732:	6838      	ldr	r0, [r7, #0]
 8003734:	f001 fd74 	bl	8005220 <memcpy>
	}
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003748:	f001 f9d6 	bl	8004af8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003752:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003754:	e011      	b.n	800377a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d012      	beq.n	8003784 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3324      	adds	r3, #36	@ 0x24
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fcac 	bl	80040c0 <xTaskRemoveFromEventList>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800376e:	f000 fd85 	bl	800427c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	3b01      	subs	r3, #1
 8003776:	b2db      	uxtb	r3, r3
 8003778:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800377a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377e:	2b00      	cmp	r3, #0
 8003780:	dce9      	bgt.n	8003756 <prvUnlockQueue+0x16>
 8003782:	e000      	b.n	8003786 <prvUnlockQueue+0x46>
					break;
 8003784:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	22ff      	movs	r2, #255	@ 0xff
 800378a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800378e:	f001 f9e5 	bl	8004b5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003792:	f001 f9b1 	bl	8004af8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800379c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800379e:	e011      	b.n	80037c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d012      	beq.n	80037ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3310      	adds	r3, #16
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fc87 	bl	80040c0 <xTaskRemoveFromEventList>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037b8:	f000 fd60 	bl	800427c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037bc:	7bbb      	ldrb	r3, [r7, #14]
 80037be:	3b01      	subs	r3, #1
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	dce9      	bgt.n	80037a0 <prvUnlockQueue+0x60>
 80037cc:	e000      	b.n	80037d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	22ff      	movs	r2, #255	@ 0xff
 80037d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80037d8:	f001 f9c0 	bl	8004b5c <vPortExitCritical>
}
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037ec:	f001 f984 	bl	8004af8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80037f8:	2301      	movs	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e001      	b.n	8003802 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003802:	f001 f9ab 	bl	8004b5c <vPortExitCritical>

	return xReturn;
 8003806:	68fb      	ldr	r3, [r7, #12]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003818:	f001 f96e 	bl	8004af8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003824:	429a      	cmp	r2, r3
 8003826:	d102      	bne.n	800382e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e001      	b.n	8003832 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003832:	f001 f993 	bl	8004b5c <vPortExitCritical>

	return xReturn;
 8003836:	68fb      	ldr	r3, [r7, #12]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08e      	sub	sp, #56	@ 0x38
 8003844:	af04      	add	r7, sp, #16
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800384e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	623b      	str	r3, [r7, #32]
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800386c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10b      	bne.n	800388a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	61fb      	str	r3, [r7, #28]
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	e7fd      	b.n	8003886 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800388a:	23a0      	movs	r3, #160	@ 0xa0
 800388c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2ba0      	cmp	r3, #160	@ 0xa0
 8003892:	d00b      	beq.n	80038ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	61bb      	str	r3, [r7, #24]
}
 80038a6:	bf00      	nop
 80038a8:	bf00      	nop
 80038aa:	e7fd      	b.n	80038a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01e      	beq.n	80038f2 <xTaskCreateStatic+0xb2>
 80038b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d01b      	beq.n	80038f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038cc:	2300      	movs	r3, #0
 80038ce:	9303      	str	r3, [sp, #12]
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d2:	9302      	str	r3, [sp, #8]
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f851 	bl	800398c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80038ec:	f000 f8ee 	bl	8003acc <prvAddNewTaskToReadyList>
 80038f0:	e001      	b.n	80038f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038f6:	697b      	ldr	r3, [r7, #20]
	}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3728      	adds	r7, #40	@ 0x28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08c      	sub	sp, #48	@ 0x30
 8003904:	af04      	add	r7, sp, #16
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4618      	mov	r0, r3
 8003916:	f001 fa11 	bl	8004d3c <pvPortMalloc>
 800391a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00e      	beq.n	8003940 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003922:	20a0      	movs	r0, #160	@ 0xa0
 8003924:	f001 fa0a 	bl	8004d3c <pvPortMalloc>
 8003928:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	631a      	str	r2, [r3, #48]	@ 0x30
 8003936:	e005      	b.n	8003944 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003938:	6978      	ldr	r0, [r7, #20]
 800393a:	f001 facd 	bl	8004ed8 <vPortFree>
 800393e:	e001      	b.n	8003944 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d017      	beq.n	800397a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003952:	88fa      	ldrh	r2, [r7, #6]
 8003954:	2300      	movs	r3, #0
 8003956:	9303      	str	r3, [sp, #12]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	9302      	str	r3, [sp, #8]
 800395c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800395e:	9301      	str	r3, [sp, #4]
 8003960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68b9      	ldr	r1, [r7, #8]
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f80f 	bl	800398c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800396e:	69f8      	ldr	r0, [r7, #28]
 8003970:	f000 f8ac 	bl	8003acc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003974:	2301      	movs	r3, #1
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	e002      	b.n	8003980 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800397a:	f04f 33ff 	mov.w	r3, #4294967295
 800397e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003980:	69bb      	ldr	r3, [r7, #24]
	}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800399a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039a4:	3b01      	subs	r3, #1
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f023 0307 	bic.w	r3, r3, #7
 80039b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00b      	beq.n	80039d6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	617b      	str	r3, [r7, #20]
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	e7fd      	b.n	80039d2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01f      	beq.n	8003a1c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039dc:	2300      	movs	r3, #0
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	e012      	b.n	8003a08 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	4413      	add	r3, r2
 80039e8:	7819      	ldrb	r1, [r3, #0]
 80039ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	3334      	adds	r3, #52	@ 0x34
 80039f2:	460a      	mov	r2, r1
 80039f4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	4413      	add	r3, r2
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d006      	beq.n	8003a10 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3301      	adds	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b0f      	cmp	r3, #15
 8003a0c:	d9e9      	bls.n	80039e2 <prvInitialiseNewTask+0x56>
 8003a0e:	e000      	b.n	8003a12 <prvInitialiseNewTask+0x86>
			{
				break;
 8003a10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a1a:	e003      	b.n	8003a24 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a26:	2b06      	cmp	r3, #6
 8003a28:	d901      	bls.n	8003a2e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a2a:	2306      	movs	r3, #6
 8003a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a32:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a38:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a42:	3304      	adds	r3, #4
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff f8d9 	bl	8002bfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4c:	3318      	adds	r3, #24
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff f8d4 	bl	8002bfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5c:	f1c3 0207 	rsb	r2, r3, #7
 8003a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a68:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7c:	334c      	adds	r3, #76	@ 0x4c
 8003a7e:	224c      	movs	r2, #76	@ 0x4c
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f001 fb48 	bl	8005118 <memset>
 8003a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8a:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac0 <prvInitialiseNewTask+0x134>)
 8003a8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a90:	4a0c      	ldr	r2, [pc, #48]	@ (8003ac4 <prvInitialiseNewTask+0x138>)
 8003a92:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a96:	4a0c      	ldr	r2, [pc, #48]	@ (8003ac8 <prvInitialiseNewTask+0x13c>)
 8003a98:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	68f9      	ldr	r1, [r7, #12]
 8003a9e:	69b8      	ldr	r0, [r7, #24]
 8003aa0:	f000 fefa 	bl	8004898 <pxPortInitialiseStack>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ab6:	bf00      	nop
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20004114 	.word	0x20004114
 8003ac4:	2000417c 	.word	0x2000417c
 8003ac8:	200041e4 	.word	0x200041e4

08003acc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ad4:	f001 f810 	bl	8004af8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b84 <prvAddNewTaskToReadyList+0xb8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	4a29      	ldr	r2, [pc, #164]	@ (8003b84 <prvAddNewTaskToReadyList+0xb8>)
 8003ae0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ae2:	4b29      	ldr	r3, [pc, #164]	@ (8003b88 <prvAddNewTaskToReadyList+0xbc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003aea:	4a27      	ldr	r2, [pc, #156]	@ (8003b88 <prvAddNewTaskToReadyList+0xbc>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003af0:	4b24      	ldr	r3, [pc, #144]	@ (8003b84 <prvAddNewTaskToReadyList+0xb8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d110      	bne.n	8003b1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003af8:	f000 fbe4 	bl	80042c4 <prvInitialiseTaskLists>
 8003afc:	e00d      	b.n	8003b1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003afe:	4b23      	ldr	r3, [pc, #140]	@ (8003b8c <prvAddNewTaskToReadyList+0xc0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b06:	4b20      	ldr	r3, [pc, #128]	@ (8003b88 <prvAddNewTaskToReadyList+0xbc>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d802      	bhi.n	8003b1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b14:	4a1c      	ldr	r2, [pc, #112]	@ (8003b88 <prvAddNewTaskToReadyList+0xbc>)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b90 <prvAddNewTaskToReadyList+0xc4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	4a1b      	ldr	r2, [pc, #108]	@ (8003b90 <prvAddNewTaskToReadyList+0xc4>)
 8003b22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b28:	2201      	movs	r2, #1
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	4b19      	ldr	r3, [pc, #100]	@ (8003b94 <prvAddNewTaskToReadyList+0xc8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	4a18      	ldr	r2, [pc, #96]	@ (8003b94 <prvAddNewTaskToReadyList+0xc8>)
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4a15      	ldr	r2, [pc, #84]	@ (8003b98 <prvAddNewTaskToReadyList+0xcc>)
 8003b44:	441a      	add	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	f7ff f862 	bl	8002c16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b52:	f001 f803 	bl	8004b5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b56:	4b0d      	ldr	r3, [pc, #52]	@ (8003b8c <prvAddNewTaskToReadyList+0xc0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00e      	beq.n	8003b7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b88 <prvAddNewTaskToReadyList+0xbc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d207      	bcs.n	8003b7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <prvAddNewTaskToReadyList+0xd0>)
 8003b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	200004c0 	.word	0x200004c0
 8003b88:	200003c0 	.word	0x200003c0
 8003b8c:	200004cc 	.word	0x200004cc
 8003b90:	200004dc 	.word	0x200004dc
 8003b94:	200004c8 	.word	0x200004c8
 8003b98:	200003c4 	.word	0x200003c4
 8003b9c:	e000ed04 	.word	0xe000ed04

08003ba0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d018      	beq.n	8003be4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003bb2:	4b14      	ldr	r3, [pc, #80]	@ (8003c04 <vTaskDelay+0x64>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <vTaskDelay+0x32>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	60bb      	str	r3, [r7, #8]
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	e7fd      	b.n	8003bce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003bd2:	f000 f885 	bl	8003ce0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fdf7 	bl	80047cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bde:	f000 f88d 	bl	8003cfc <xTaskResumeAll>
 8003be2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d107      	bne.n	8003bfa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003bea:	4b07      	ldr	r3, [pc, #28]	@ (8003c08 <vTaskDelay+0x68>)
 8003bec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	200004e8 	.word	0x200004e8
 8003c08:	e000ed04 	.word	0xe000ed04

08003c0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	@ 0x28
 8003c10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c1a:	463a      	mov	r2, r7
 8003c1c:	1d39      	adds	r1, r7, #4
 8003c1e:	f107 0308 	add.w	r3, r7, #8
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fc fc64 	bl	80004f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c28:	6839      	ldr	r1, [r7, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	9202      	str	r2, [sp, #8]
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	2300      	movs	r3, #0
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	2300      	movs	r3, #0
 8003c38:	460a      	mov	r2, r1
 8003c3a:	4921      	ldr	r1, [pc, #132]	@ (8003cc0 <vTaskStartScheduler+0xb4>)
 8003c3c:	4821      	ldr	r0, [pc, #132]	@ (8003cc4 <vTaskStartScheduler+0xb8>)
 8003c3e:	f7ff fdff 	bl	8003840 <xTaskCreateStatic>
 8003c42:	4603      	mov	r3, r0
 8003c44:	4a20      	ldr	r2, [pc, #128]	@ (8003cc8 <vTaskStartScheduler+0xbc>)
 8003c46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c48:	4b1f      	ldr	r3, [pc, #124]	@ (8003cc8 <vTaskStartScheduler+0xbc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c50:	2301      	movs	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	e001      	b.n	8003c5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d11b      	bne.n	8003c98 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	613b      	str	r3, [r7, #16]
}
 8003c72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c74:	4b15      	ldr	r3, [pc, #84]	@ (8003ccc <vTaskStartScheduler+0xc0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	334c      	adds	r3, #76	@ 0x4c
 8003c7a:	4a15      	ldr	r2, [pc, #84]	@ (8003cd0 <vTaskStartScheduler+0xc4>)
 8003c7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c7e:	4b15      	ldr	r3, [pc, #84]	@ (8003cd4 <vTaskStartScheduler+0xc8>)
 8003c80:	f04f 32ff 	mov.w	r2, #4294967295
 8003c84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c86:	4b14      	ldr	r3, [pc, #80]	@ (8003cd8 <vTaskStartScheduler+0xcc>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c8c:	4b13      	ldr	r3, [pc, #76]	@ (8003cdc <vTaskStartScheduler+0xd0>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c92:	f000 fe8d 	bl	80049b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c96:	e00f      	b.n	8003cb8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d10b      	bne.n	8003cb8 <vTaskStartScheduler+0xac>
	__asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	60fb      	str	r3, [r7, #12]
}
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <vTaskStartScheduler+0xa8>
}
 8003cb8:	bf00      	nop
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	080054a0 	.word	0x080054a0
 8003cc4:	08004295 	.word	0x08004295
 8003cc8:	200004e4 	.word	0x200004e4
 8003ccc:	200003c0 	.word	0x200003c0
 8003cd0:	20000010 	.word	0x20000010
 8003cd4:	200004e0 	.word	0x200004e0
 8003cd8:	200004cc 	.word	0x200004cc
 8003cdc:	200004c4 	.word	0x200004c4

08003ce0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ce4:	4b04      	ldr	r3, [pc, #16]	@ (8003cf8 <vTaskSuspendAll+0x18>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	4a03      	ldr	r2, [pc, #12]	@ (8003cf8 <vTaskSuspendAll+0x18>)
 8003cec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	200004e8 	.word	0x200004e8

08003cfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d0a:	4b42      	ldr	r3, [pc, #264]	@ (8003e14 <xTaskResumeAll+0x118>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10b      	bne.n	8003d2a <xTaskResumeAll+0x2e>
	__asm volatile
 8003d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	603b      	str	r3, [r7, #0]
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop
 8003d28:	e7fd      	b.n	8003d26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d2a:	f000 fee5 	bl	8004af8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d2e:	4b39      	ldr	r3, [pc, #228]	@ (8003e14 <xTaskResumeAll+0x118>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	4a37      	ldr	r2, [pc, #220]	@ (8003e14 <xTaskResumeAll+0x118>)
 8003d36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d38:	4b36      	ldr	r3, [pc, #216]	@ (8003e14 <xTaskResumeAll+0x118>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d161      	bne.n	8003e04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d40:	4b35      	ldr	r3, [pc, #212]	@ (8003e18 <xTaskResumeAll+0x11c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d05d      	beq.n	8003e04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d48:	e02e      	b.n	8003da8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4a:	4b34      	ldr	r3, [pc, #208]	@ (8003e1c <xTaskResumeAll+0x120>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3318      	adds	r3, #24
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe ffba 	bl	8002cd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe ffb5 	bl	8002cd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8003e20 <xTaskResumeAll+0x124>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	4a2a      	ldr	r2, [pc, #168]	@ (8003e20 <xTaskResumeAll+0x124>)
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4a27      	ldr	r2, [pc, #156]	@ (8003e24 <xTaskResumeAll+0x128>)
 8003d86:	441a      	add	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	f7fe ff41 	bl	8002c16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d98:	4b23      	ldr	r3, [pc, #140]	@ (8003e28 <xTaskResumeAll+0x12c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d302      	bcc.n	8003da8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003da2:	4b22      	ldr	r3, [pc, #136]	@ (8003e2c <xTaskResumeAll+0x130>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003da8:	4b1c      	ldr	r3, [pc, #112]	@ (8003e1c <xTaskResumeAll+0x120>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1cc      	bne.n	8003d4a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003db6:	f000 fb29 	bl	800440c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003dba:	4b1d      	ldr	r3, [pc, #116]	@ (8003e30 <xTaskResumeAll+0x134>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d010      	beq.n	8003de8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003dc6:	f000 f837 	bl	8003e38 <xTaskIncrementTick>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003dd0:	4b16      	ldr	r3, [pc, #88]	@ (8003e2c <xTaskResumeAll+0x130>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f1      	bne.n	8003dc6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003de2:	4b13      	ldr	r3, [pc, #76]	@ (8003e30 <xTaskResumeAll+0x134>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003de8:	4b10      	ldr	r3, [pc, #64]	@ (8003e2c <xTaskResumeAll+0x130>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d009      	beq.n	8003e04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003df0:	2301      	movs	r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003df4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e34 <xTaskResumeAll+0x138>)
 8003df6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e04:	f000 feaa 	bl	8004b5c <vPortExitCritical>

	return xAlreadyYielded;
 8003e08:	68bb      	ldr	r3, [r7, #8]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	200004e8 	.word	0x200004e8
 8003e18:	200004c0 	.word	0x200004c0
 8003e1c:	20000480 	.word	0x20000480
 8003e20:	200004c8 	.word	0x200004c8
 8003e24:	200003c4 	.word	0x200003c4
 8003e28:	200003c0 	.word	0x200003c0
 8003e2c:	200004d4 	.word	0x200004d4
 8003e30:	200004d0 	.word	0x200004d0
 8003e34:	e000ed04 	.word	0xe000ed04

08003e38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e42:	4b4f      	ldr	r3, [pc, #316]	@ (8003f80 <xTaskIncrementTick+0x148>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f040 808f 	bne.w	8003f6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e4c:	4b4d      	ldr	r3, [pc, #308]	@ (8003f84 <xTaskIncrementTick+0x14c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3301      	adds	r3, #1
 8003e52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e54:	4a4b      	ldr	r2, [pc, #300]	@ (8003f84 <xTaskIncrementTick+0x14c>)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d121      	bne.n	8003ea4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e60:	4b49      	ldr	r3, [pc, #292]	@ (8003f88 <xTaskIncrementTick+0x150>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	603b      	str	r3, [r7, #0]
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	e7fd      	b.n	8003e7e <xTaskIncrementTick+0x46>
 8003e82:	4b41      	ldr	r3, [pc, #260]	@ (8003f88 <xTaskIncrementTick+0x150>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	4b40      	ldr	r3, [pc, #256]	@ (8003f8c <xTaskIncrementTick+0x154>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a3e      	ldr	r2, [pc, #248]	@ (8003f88 <xTaskIncrementTick+0x150>)
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	4a3e      	ldr	r2, [pc, #248]	@ (8003f8c <xTaskIncrementTick+0x154>)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	4b3e      	ldr	r3, [pc, #248]	@ (8003f90 <xTaskIncrementTick+0x158>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f90 <xTaskIncrementTick+0x158>)
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	f000 fab4 	bl	800440c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8003f94 <xTaskIncrementTick+0x15c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d348      	bcc.n	8003f40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eae:	4b36      	ldr	r3, [pc, #216]	@ (8003f88 <xTaskIncrementTick+0x150>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d104      	bne.n	8003ec2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eb8:	4b36      	ldr	r3, [pc, #216]	@ (8003f94 <xTaskIncrementTick+0x15c>)
 8003eba:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebe:	601a      	str	r2, [r3, #0]
					break;
 8003ec0:	e03e      	b.n	8003f40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec2:	4b31      	ldr	r3, [pc, #196]	@ (8003f88 <xTaskIncrementTick+0x150>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d203      	bcs.n	8003ee2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003eda:	4a2e      	ldr	r2, [pc, #184]	@ (8003f94 <xTaskIncrementTick+0x15c>)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ee0:	e02e      	b.n	8003f40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe fef2 	bl	8002cd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d004      	beq.n	8003efe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	3318      	adds	r3, #24
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe fee9 	bl	8002cd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f02:	2201      	movs	r2, #1
 8003f04:	409a      	lsls	r2, r3
 8003f06:	4b24      	ldr	r3, [pc, #144]	@ (8003f98 <xTaskIncrementTick+0x160>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	4a22      	ldr	r2, [pc, #136]	@ (8003f98 <xTaskIncrementTick+0x160>)
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8003f9c <xTaskIncrementTick+0x164>)
 8003f1e:	441a      	add	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f7fe fe75 	bl	8002c16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f30:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa0 <xTaskIncrementTick+0x168>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d3b9      	bcc.n	8003eae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f3e:	e7b6      	b.n	8003eae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f40:	4b17      	ldr	r3, [pc, #92]	@ (8003fa0 <xTaskIncrementTick+0x168>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f46:	4915      	ldr	r1, [pc, #84]	@ (8003f9c <xTaskIncrementTick+0x164>)
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d901      	bls.n	8003f5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f5c:	4b11      	ldr	r3, [pc, #68]	@ (8003fa4 <xTaskIncrementTick+0x16c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d007      	beq.n	8003f74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f64:	2301      	movs	r3, #1
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	e004      	b.n	8003f74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa8 <xTaskIncrementTick+0x170>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa8 <xTaskIncrementTick+0x170>)
 8003f72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f74:	697b      	ldr	r3, [r7, #20]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	200004e8 	.word	0x200004e8
 8003f84:	200004c4 	.word	0x200004c4
 8003f88:	20000478 	.word	0x20000478
 8003f8c:	2000047c 	.word	0x2000047c
 8003f90:	200004d8 	.word	0x200004d8
 8003f94:	200004e0 	.word	0x200004e0
 8003f98:	200004c8 	.word	0x200004c8
 8003f9c:	200003c4 	.word	0x200003c4
 8003fa0:	200003c0 	.word	0x200003c0
 8003fa4:	200004d4 	.word	0x200004d4
 8003fa8:	200004d0 	.word	0x200004d0

08003fac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800405c <vTaskSwitchContext+0xb0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fba:	4b29      	ldr	r3, [pc, #164]	@ (8004060 <vTaskSwitchContext+0xb4>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fc0:	e045      	b.n	800404e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003fc2:	4b27      	ldr	r3, [pc, #156]	@ (8004060 <vTaskSwitchContext+0xb4>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fc8:	4b26      	ldr	r3, [pc, #152]	@ (8004064 <vTaskSwitchContext+0xb8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	fab3 f383 	clz	r3, r3
 8003fd4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003fd6:	7afb      	ldrb	r3, [r7, #11]
 8003fd8:	f1c3 031f 	rsb	r3, r3, #31
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	4922      	ldr	r1, [pc, #136]	@ (8004068 <vTaskSwitchContext+0xbc>)
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10b      	bne.n	800400a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	607b      	str	r3, [r7, #4]
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	e7fd      	b.n	8004006 <vTaskSwitchContext+0x5a>
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4a14      	ldr	r2, [pc, #80]	@ (8004068 <vTaskSwitchContext+0xbc>)
 8004016:	4413      	add	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	605a      	str	r2, [r3, #4]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	3308      	adds	r3, #8
 800402c:	429a      	cmp	r2, r3
 800402e:	d104      	bne.n	800403a <vTaskSwitchContext+0x8e>
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4a0a      	ldr	r2, [pc, #40]	@ (800406c <vTaskSwitchContext+0xc0>)
 8004042:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004044:	4b09      	ldr	r3, [pc, #36]	@ (800406c <vTaskSwitchContext+0xc0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	334c      	adds	r3, #76	@ 0x4c
 800404a:	4a09      	ldr	r2, [pc, #36]	@ (8004070 <vTaskSwitchContext+0xc4>)
 800404c:	6013      	str	r3, [r2, #0]
}
 800404e:	bf00      	nop
 8004050:	371c      	adds	r7, #28
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	200004e8 	.word	0x200004e8
 8004060:	200004d4 	.word	0x200004d4
 8004064:	200004c8 	.word	0x200004c8
 8004068:	200003c4 	.word	0x200003c4
 800406c:	200003c0 	.word	0x200003c0
 8004070:	20000010 	.word	0x20000010

08004074 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10b      	bne.n	800409c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	60fb      	str	r3, [r7, #12]
}
 8004096:	bf00      	nop
 8004098:	bf00      	nop
 800409a:	e7fd      	b.n	8004098 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800409c:	4b07      	ldr	r3, [pc, #28]	@ (80040bc <vTaskPlaceOnEventList+0x48>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3318      	adds	r3, #24
 80040a2:	4619      	mov	r1, r3
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7fe fdda 	bl	8002c5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040aa:	2101      	movs	r1, #1
 80040ac:	6838      	ldr	r0, [r7, #0]
 80040ae:	f000 fb8d 	bl	80047cc <prvAddCurrentTaskToDelayedList>
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200003c0 	.word	0x200003c0

080040c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10b      	bne.n	80040ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	60fb      	str	r3, [r7, #12]
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	e7fd      	b.n	80040ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	3318      	adds	r3, #24
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fdec 	bl	8002cd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004170 <xTaskRemoveFromEventList+0xb0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d11c      	bne.n	800413a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	3304      	adds	r3, #4
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe fde3 	bl	8002cd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410e:	2201      	movs	r2, #1
 8004110:	409a      	lsls	r2, r3
 8004112:	4b18      	ldr	r3, [pc, #96]	@ (8004174 <xTaskRemoveFromEventList+0xb4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	4a16      	ldr	r2, [pc, #88]	@ (8004174 <xTaskRemoveFromEventList+0xb4>)
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4a13      	ldr	r2, [pc, #76]	@ (8004178 <xTaskRemoveFromEventList+0xb8>)
 800412a:	441a      	add	r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f7fe fd6f 	bl	8002c16 <vListInsertEnd>
 8004138:	e005      	b.n	8004146 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3318      	adds	r3, #24
 800413e:	4619      	mov	r1, r3
 8004140:	480e      	ldr	r0, [pc, #56]	@ (800417c <xTaskRemoveFromEventList+0xbc>)
 8004142:	f7fe fd68 	bl	8002c16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414a:	4b0d      	ldr	r3, [pc, #52]	@ (8004180 <xTaskRemoveFromEventList+0xc0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	429a      	cmp	r2, r3
 8004152:	d905      	bls.n	8004160 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004154:	2301      	movs	r3, #1
 8004156:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004158:	4b0a      	ldr	r3, [pc, #40]	@ (8004184 <xTaskRemoveFromEventList+0xc4>)
 800415a:	2201      	movs	r2, #1
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e001      	b.n	8004164 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004164:	697b      	ldr	r3, [r7, #20]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	200004e8 	.word	0x200004e8
 8004174:	200004c8 	.word	0x200004c8
 8004178:	200003c4 	.word	0x200003c4
 800417c:	20000480 	.word	0x20000480
 8004180:	200003c0 	.word	0x200003c0
 8004184:	200004d4 	.word	0x200004d4

08004188 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004190:	4b06      	ldr	r3, [pc, #24]	@ (80041ac <vTaskInternalSetTimeOutState+0x24>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004198:	4b05      	ldr	r3, [pc, #20]	@ (80041b0 <vTaskInternalSetTimeOutState+0x28>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	605a      	str	r2, [r3, #4]
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	200004d8 	.word	0x200004d8
 80041b0:	200004c4 	.word	0x200004c4

080041b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10b      	bne.n	80041dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	613b      	str	r3, [r7, #16]
}
 80041d6:	bf00      	nop
 80041d8:	bf00      	nop
 80041da:	e7fd      	b.n	80041d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10b      	bne.n	80041fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	60fb      	str	r3, [r7, #12]
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
 80041f8:	e7fd      	b.n	80041f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80041fa:	f000 fc7d 	bl	8004af8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004274 <xTaskCheckForTimeOut+0xc0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004216:	d102      	bne.n	800421e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004218:	2300      	movs	r3, #0
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	e023      	b.n	8004266 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4b15      	ldr	r3, [pc, #84]	@ (8004278 <xTaskCheckForTimeOut+0xc4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d007      	beq.n	800423a <xTaskCheckForTimeOut+0x86>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	429a      	cmp	r2, r3
 8004232:	d302      	bcc.n	800423a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004234:	2301      	movs	r3, #1
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	e015      	b.n	8004266 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	429a      	cmp	r2, r3
 8004242:	d20b      	bcs.n	800425c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	1ad2      	subs	r2, r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ff99 	bl	8004188 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	e004      	b.n	8004266 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004262:	2301      	movs	r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004266:	f000 fc79 	bl	8004b5c <vPortExitCritical>

	return xReturn;
 800426a:	69fb      	ldr	r3, [r7, #28]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3720      	adds	r7, #32
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	200004c4 	.word	0x200004c4
 8004278:	200004d8 	.word	0x200004d8

0800427c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004280:	4b03      	ldr	r3, [pc, #12]	@ (8004290 <vTaskMissedYield+0x14>)
 8004282:	2201      	movs	r2, #1
 8004284:	601a      	str	r2, [r3, #0]
}
 8004286:	bf00      	nop
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	200004d4 	.word	0x200004d4

08004294 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800429c:	f000 f852 	bl	8004344 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042a0:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <prvIdleTask+0x28>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d9f9      	bls.n	800429c <prvIdleTask+0x8>
			{
				taskYIELD();
 80042a8:	4b05      	ldr	r3, [pc, #20]	@ (80042c0 <prvIdleTask+0x2c>)
 80042aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042b8:	e7f0      	b.n	800429c <prvIdleTask+0x8>
 80042ba:	bf00      	nop
 80042bc:	200003c4 	.word	0x200003c4
 80042c0:	e000ed04 	.word	0xe000ed04

080042c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042ca:	2300      	movs	r3, #0
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	e00c      	b.n	80042ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4a12      	ldr	r2, [pc, #72]	@ (8004324 <prvInitialiseTaskLists+0x60>)
 80042dc:	4413      	add	r3, r2
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fc6c 	bl	8002bbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3301      	adds	r3, #1
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b06      	cmp	r3, #6
 80042ee:	d9ef      	bls.n	80042d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042f0:	480d      	ldr	r0, [pc, #52]	@ (8004328 <prvInitialiseTaskLists+0x64>)
 80042f2:	f7fe fc63 	bl	8002bbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042f6:	480d      	ldr	r0, [pc, #52]	@ (800432c <prvInitialiseTaskLists+0x68>)
 80042f8:	f7fe fc60 	bl	8002bbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042fc:	480c      	ldr	r0, [pc, #48]	@ (8004330 <prvInitialiseTaskLists+0x6c>)
 80042fe:	f7fe fc5d 	bl	8002bbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004302:	480c      	ldr	r0, [pc, #48]	@ (8004334 <prvInitialiseTaskLists+0x70>)
 8004304:	f7fe fc5a 	bl	8002bbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004308:	480b      	ldr	r0, [pc, #44]	@ (8004338 <prvInitialiseTaskLists+0x74>)
 800430a:	f7fe fc57 	bl	8002bbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800430e:	4b0b      	ldr	r3, [pc, #44]	@ (800433c <prvInitialiseTaskLists+0x78>)
 8004310:	4a05      	ldr	r2, [pc, #20]	@ (8004328 <prvInitialiseTaskLists+0x64>)
 8004312:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004314:	4b0a      	ldr	r3, [pc, #40]	@ (8004340 <prvInitialiseTaskLists+0x7c>)
 8004316:	4a05      	ldr	r2, [pc, #20]	@ (800432c <prvInitialiseTaskLists+0x68>)
 8004318:	601a      	str	r2, [r3, #0]
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	200003c4 	.word	0x200003c4
 8004328:	20000450 	.word	0x20000450
 800432c:	20000464 	.word	0x20000464
 8004330:	20000480 	.word	0x20000480
 8004334:	20000494 	.word	0x20000494
 8004338:	200004ac 	.word	0x200004ac
 800433c:	20000478 	.word	0x20000478
 8004340:	2000047c 	.word	0x2000047c

08004344 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800434a:	e019      	b.n	8004380 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800434c:	f000 fbd4 	bl	8004af8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004350:	4b10      	ldr	r3, [pc, #64]	@ (8004394 <prvCheckTasksWaitingTermination+0x50>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3304      	adds	r3, #4
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe fcb7 	bl	8002cd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004362:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <prvCheckTasksWaitingTermination+0x54>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3b01      	subs	r3, #1
 8004368:	4a0b      	ldr	r2, [pc, #44]	@ (8004398 <prvCheckTasksWaitingTermination+0x54>)
 800436a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800436c:	4b0b      	ldr	r3, [pc, #44]	@ (800439c <prvCheckTasksWaitingTermination+0x58>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3b01      	subs	r3, #1
 8004372:	4a0a      	ldr	r2, [pc, #40]	@ (800439c <prvCheckTasksWaitingTermination+0x58>)
 8004374:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004376:	f000 fbf1 	bl	8004b5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f810 	bl	80043a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004380:	4b06      	ldr	r3, [pc, #24]	@ (800439c <prvCheckTasksWaitingTermination+0x58>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e1      	bne.n	800434c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000494 	.word	0x20000494
 8004398:	200004c0 	.word	0x200004c0
 800439c:	200004a8 	.word	0x200004a8

080043a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	334c      	adds	r3, #76	@ 0x4c
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 febb 	bl	8005128 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d108      	bne.n	80043ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fd89 	bl	8004ed8 <vPortFree>
				vPortFree( pxTCB );
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fd86 	bl	8004ed8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043cc:	e019      	b.n	8004402 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d103      	bne.n	80043e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fd7d 	bl	8004ed8 <vPortFree>
	}
 80043de:	e010      	b.n	8004402 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d00b      	beq.n	8004402 <prvDeleteTCB+0x62>
	__asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	60fb      	str	r3, [r7, #12]
}
 80043fc:	bf00      	nop
 80043fe:	bf00      	nop
 8004400:	e7fd      	b.n	80043fe <prvDeleteTCB+0x5e>
	}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004412:	4b0c      	ldr	r3, [pc, #48]	@ (8004444 <prvResetNextTaskUnblockTime+0x38>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800441c:	4b0a      	ldr	r3, [pc, #40]	@ (8004448 <prvResetNextTaskUnblockTime+0x3c>)
 800441e:	f04f 32ff 	mov.w	r2, #4294967295
 8004422:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004424:	e008      	b.n	8004438 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004426:	4b07      	ldr	r3, [pc, #28]	@ (8004444 <prvResetNextTaskUnblockTime+0x38>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4a04      	ldr	r2, [pc, #16]	@ (8004448 <prvResetNextTaskUnblockTime+0x3c>)
 8004436:	6013      	str	r3, [r2, #0]
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	20000478 	.word	0x20000478
 8004448:	200004e0 	.word	0x200004e0

0800444c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004452:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <xTaskGetSchedulerState+0x34>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800445a:	2301      	movs	r3, #1
 800445c:	607b      	str	r3, [r7, #4]
 800445e:	e008      	b.n	8004472 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004460:	4b08      	ldr	r3, [pc, #32]	@ (8004484 <xTaskGetSchedulerState+0x38>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d102      	bne.n	800446e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004468:	2302      	movs	r3, #2
 800446a:	607b      	str	r3, [r7, #4]
 800446c:	e001      	b.n	8004472 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800446e:	2300      	movs	r3, #0
 8004470:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004472:	687b      	ldr	r3, [r7, #4]
	}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	200004cc 	.word	0x200004cc
 8004484:	200004e8 	.word	0x200004e8

08004488 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d05e      	beq.n	800455c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a2:	4b31      	ldr	r3, [pc, #196]	@ (8004568 <xTaskPriorityInherit+0xe0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d24e      	bcs.n	800454a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	db06      	blt.n	80044c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004568 <xTaskPriorityInherit+0xe0>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	f1c3 0207 	rsb	r2, r3, #7
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	6959      	ldr	r1, [r3, #20]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4a26      	ldr	r2, [pc, #152]	@ (800456c <xTaskPriorityInherit+0xe4>)
 80044d4:	4413      	add	r3, r2
 80044d6:	4299      	cmp	r1, r3
 80044d8:	d12f      	bne.n	800453a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	3304      	adds	r3, #4
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe fbf6 	bl	8002cd0 <uxListRemove>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ee:	2201      	movs	r2, #1
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	43da      	mvns	r2, r3
 80044f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004570 <xTaskPriorityInherit+0xe8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4013      	ands	r3, r2
 80044fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004570 <xTaskPriorityInherit+0xe8>)
 80044fe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004500:	4b19      	ldr	r3, [pc, #100]	@ (8004568 <xTaskPriorityInherit+0xe0>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450e:	2201      	movs	r2, #1
 8004510:	409a      	lsls	r2, r3
 8004512:	4b17      	ldr	r3, [pc, #92]	@ (8004570 <xTaskPriorityInherit+0xe8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4313      	orrs	r3, r2
 8004518:	4a15      	ldr	r2, [pc, #84]	@ (8004570 <xTaskPriorityInherit+0xe8>)
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4a10      	ldr	r2, [pc, #64]	@ (800456c <xTaskPriorityInherit+0xe4>)
 800452a:	441a      	add	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	3304      	adds	r3, #4
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f7fe fb6f 	bl	8002c16 <vListInsertEnd>
 8004538:	e004      	b.n	8004544 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800453a:	4b0b      	ldr	r3, [pc, #44]	@ (8004568 <xTaskPriorityInherit+0xe0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	e008      	b.n	800455c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800454e:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <xTaskPriorityInherit+0xe0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004554:	429a      	cmp	r2, r3
 8004556:	d201      	bcs.n	800455c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004558:	2301      	movs	r3, #1
 800455a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800455c:	68fb      	ldr	r3, [r7, #12]
	}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	200003c0 	.word	0x200003c0
 800456c:	200003c4 	.word	0x200003c4
 8004570:	200004c8 	.word	0x200004c8

08004574 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d070      	beq.n	800466c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800458a:	4b3b      	ldr	r3, [pc, #236]	@ (8004678 <xTaskPriorityDisinherit+0x104>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	429a      	cmp	r2, r3
 8004592:	d00b      	beq.n	80045ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	60fb      	str	r3, [r7, #12]
}
 80045a6:	bf00      	nop
 80045a8:	bf00      	nop
 80045aa:	e7fd      	b.n	80045a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10b      	bne.n	80045cc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	60bb      	str	r3, [r7, #8]
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d0:	1e5a      	subs	r2, r3, #1
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045de:	429a      	cmp	r2, r3
 80045e0:	d044      	beq.n	800466c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d140      	bne.n	800466c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe fb6e 	bl	8002cd0 <uxListRemove>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d115      	bne.n	8004626 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fe:	491f      	ldr	r1, [pc, #124]	@ (800467c <xTaskPriorityDisinherit+0x108>)
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10a      	bne.n	8004626 <xTaskPriorityDisinherit+0xb2>
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	2201      	movs	r2, #1
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43da      	mvns	r2, r3
 800461c:	4b18      	ldr	r3, [pc, #96]	@ (8004680 <xTaskPriorityDisinherit+0x10c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4013      	ands	r3, r2
 8004622:	4a17      	ldr	r2, [pc, #92]	@ (8004680 <xTaskPriorityDisinherit+0x10c>)
 8004624:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004632:	f1c3 0207 	rsb	r2, r3, #7
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463e:	2201      	movs	r2, #1
 8004640:	409a      	lsls	r2, r3
 8004642:	4b0f      	ldr	r3, [pc, #60]	@ (8004680 <xTaskPriorityDisinherit+0x10c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4313      	orrs	r3, r2
 8004648:	4a0d      	ldr	r2, [pc, #52]	@ (8004680 <xTaskPriorityDisinherit+0x10c>)
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4a08      	ldr	r2, [pc, #32]	@ (800467c <xTaskPriorityDisinherit+0x108>)
 800465a:	441a      	add	r2, r3
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	3304      	adds	r3, #4
 8004660:	4619      	mov	r1, r3
 8004662:	4610      	mov	r0, r2
 8004664:	f7fe fad7 	bl	8002c16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004668:	2301      	movs	r3, #1
 800466a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800466c:	697b      	ldr	r3, [r7, #20]
	}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	200003c0 	.word	0x200003c0
 800467c:	200003c4 	.word	0x200003c4
 8004680:	200004c8 	.word	0x200004c8

08004684 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004692:	2301      	movs	r3, #1
 8004694:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d079      	beq.n	8004790 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10b      	bne.n	80046bc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	60fb      	str	r3, [r7, #12]
}
 80046b6:	bf00      	nop
 80046b8:	bf00      	nop
 80046ba:	e7fd      	b.n	80046b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d902      	bls.n	80046cc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	61fb      	str	r3, [r7, #28]
 80046ca:	e002      	b.n	80046d2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d059      	beq.n	8004790 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d154      	bne.n	8004790 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80046e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004798 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d10b      	bne.n	8004708 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	60bb      	str	r3, [r7, #8]
}
 8004702:	bf00      	nop
 8004704:	bf00      	nop
 8004706:	e7fd      	b.n	8004704 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	db04      	blt.n	8004726 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f1c3 0207 	rsb	r2, r3, #7
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	6959      	ldr	r1, [r3, #20]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4a19      	ldr	r2, [pc, #100]	@ (800479c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004736:	4413      	add	r3, r2
 8004738:	4299      	cmp	r1, r3
 800473a:	d129      	bne.n	8004790 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	3304      	adds	r3, #4
 8004740:	4618      	mov	r0, r3
 8004742:	f7fe fac5 	bl	8002cd0 <uxListRemove>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004750:	2201      	movs	r2, #1
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43da      	mvns	r2, r3
 8004758:	4b11      	ldr	r3, [pc, #68]	@ (80047a0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4013      	ands	r3, r2
 800475e:	4a10      	ldr	r2, [pc, #64]	@ (80047a0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004760:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	2201      	movs	r2, #1
 8004768:	409a      	lsls	r2, r3
 800476a:	4b0d      	ldr	r3, [pc, #52]	@ (80047a0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4313      	orrs	r3, r2
 8004770:	4a0b      	ldr	r2, [pc, #44]	@ (80047a0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4a06      	ldr	r2, [pc, #24]	@ (800479c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004782:	441a      	add	r2, r3
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	3304      	adds	r3, #4
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f7fe fa43 	bl	8002c16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004790:	bf00      	nop
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	200003c0 	.word	0x200003c0
 800479c:	200003c4 	.word	0x200003c4
 80047a0:	200004c8 	.word	0x200004c8

080047a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80047a8:	4b07      	ldr	r3, [pc, #28]	@ (80047c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d004      	beq.n	80047ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80047b0:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047b6:	3201      	adds	r2, #1
 80047b8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80047ba:	4b03      	ldr	r3, [pc, #12]	@ (80047c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80047bc:	681b      	ldr	r3, [r3, #0]
	}
 80047be:	4618      	mov	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	200003c0 	.word	0x200003c0

080047cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047d6:	4b29      	ldr	r3, [pc, #164]	@ (800487c <prvAddCurrentTaskToDelayedList+0xb0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047dc:	4b28      	ldr	r3, [pc, #160]	@ (8004880 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3304      	adds	r3, #4
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe fa74 	bl	8002cd0 <uxListRemove>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10b      	bne.n	8004806 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80047ee:	4b24      	ldr	r3, [pc, #144]	@ (8004880 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f4:	2201      	movs	r2, #1
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43da      	mvns	r2, r3
 80047fc:	4b21      	ldr	r3, [pc, #132]	@ (8004884 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4013      	ands	r3, r2
 8004802:	4a20      	ldr	r2, [pc, #128]	@ (8004884 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004804:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480c:	d10a      	bne.n	8004824 <prvAddCurrentTaskToDelayedList+0x58>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004814:	4b1a      	ldr	r3, [pc, #104]	@ (8004880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3304      	adds	r3, #4
 800481a:	4619      	mov	r1, r3
 800481c:	481a      	ldr	r0, [pc, #104]	@ (8004888 <prvAddCurrentTaskToDelayedList+0xbc>)
 800481e:	f7fe f9fa 	bl	8002c16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004822:	e026      	b.n	8004872 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4413      	add	r3, r2
 800482a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800482c:	4b14      	ldr	r3, [pc, #80]	@ (8004880 <prvAddCurrentTaskToDelayedList+0xb4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	429a      	cmp	r2, r3
 800483a:	d209      	bcs.n	8004850 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800483c:	4b13      	ldr	r3, [pc, #76]	@ (800488c <prvAddCurrentTaskToDelayedList+0xc0>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4b0f      	ldr	r3, [pc, #60]	@ (8004880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3304      	adds	r3, #4
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f7fe fa08 	bl	8002c5e <vListInsert>
}
 800484e:	e010      	b.n	8004872 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004850:	4b0f      	ldr	r3, [pc, #60]	@ (8004890 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	4b0a      	ldr	r3, [pc, #40]	@ (8004880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3304      	adds	r3, #4
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f7fe f9fe 	bl	8002c5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004862:	4b0c      	ldr	r3, [pc, #48]	@ (8004894 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	429a      	cmp	r2, r3
 800486a:	d202      	bcs.n	8004872 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800486c:	4a09      	ldr	r2, [pc, #36]	@ (8004894 <prvAddCurrentTaskToDelayedList+0xc8>)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	6013      	str	r3, [r2, #0]
}
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	200004c4 	.word	0x200004c4
 8004880:	200003c0 	.word	0x200003c0
 8004884:	200004c8 	.word	0x200004c8
 8004888:	200004ac 	.word	0x200004ac
 800488c:	2000047c 	.word	0x2000047c
 8004890:	20000478 	.word	0x20000478
 8004894:	200004e0 	.word	0x200004e0

08004898 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3b04      	subs	r3, #4
 80048a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3b04      	subs	r3, #4
 80048b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f023 0201 	bic.w	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3b04      	subs	r3, #4
 80048c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048c8:	4a0c      	ldr	r2, [pc, #48]	@ (80048fc <pxPortInitialiseStack+0x64>)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3b14      	subs	r3, #20
 80048d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3b04      	subs	r3, #4
 80048de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f06f 0202 	mvn.w	r2, #2
 80048e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	3b20      	subs	r3, #32
 80048ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048ee:	68fb      	ldr	r3, [r7, #12]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	08004901 	.word	0x08004901

08004900 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800490a:	4b13      	ldr	r3, [pc, #76]	@ (8004958 <prvTaskExitError+0x58>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004912:	d00b      	beq.n	800492c <prvTaskExitError+0x2c>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	60fb      	str	r3, [r7, #12]
}
 8004926:	bf00      	nop
 8004928:	bf00      	nop
 800492a:	e7fd      	b.n	8004928 <prvTaskExitError+0x28>
	__asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	60bb      	str	r3, [r7, #8]
}
 800493e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004940:	bf00      	nop
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0fc      	beq.n	8004942 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	2000000c 	.word	0x2000000c
 800495c:	00000000 	.word	0x00000000

08004960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004960:	4b07      	ldr	r3, [pc, #28]	@ (8004980 <pxCurrentTCBConst2>)
 8004962:	6819      	ldr	r1, [r3, #0]
 8004964:	6808      	ldr	r0, [r1, #0]
 8004966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496a:	f380 8809 	msr	PSP, r0
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f04f 0000 	mov.w	r0, #0
 8004976:	f380 8811 	msr	BASEPRI, r0
 800497a:	4770      	bx	lr
 800497c:	f3af 8000 	nop.w

08004980 <pxCurrentTCBConst2>:
 8004980:	200003c0 	.word	0x200003c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop

08004988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004988:	4808      	ldr	r0, [pc, #32]	@ (80049ac <prvPortStartFirstTask+0x24>)
 800498a:	6800      	ldr	r0, [r0, #0]
 800498c:	6800      	ldr	r0, [r0, #0]
 800498e:	f380 8808 	msr	MSP, r0
 8004992:	f04f 0000 	mov.w	r0, #0
 8004996:	f380 8814 	msr	CONTROL, r0
 800499a:	b662      	cpsie	i
 800499c:	b661      	cpsie	f
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	df00      	svc	0
 80049a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049aa:	bf00      	nop
 80049ac:	e000ed08 	.word	0xe000ed08

080049b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049b6:	4b47      	ldr	r3, [pc, #284]	@ (8004ad4 <xPortStartScheduler+0x124>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a47      	ldr	r2, [pc, #284]	@ (8004ad8 <xPortStartScheduler+0x128>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d10b      	bne.n	80049d8 <xPortStartScheduler+0x28>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	613b      	str	r3, [r7, #16]
}
 80049d2:	bf00      	nop
 80049d4:	bf00      	nop
 80049d6:	e7fd      	b.n	80049d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049d8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ad4 <xPortStartScheduler+0x124>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a3f      	ldr	r2, [pc, #252]	@ (8004adc <xPortStartScheduler+0x12c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10b      	bne.n	80049fa <xPortStartScheduler+0x4a>
	__asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	60fb      	str	r3, [r7, #12]
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop
 80049f8:	e7fd      	b.n	80049f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049fa:	4b39      	ldr	r3, [pc, #228]	@ (8004ae0 <xPortStartScheduler+0x130>)
 80049fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	22ff      	movs	r2, #255	@ 0xff
 8004a0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	4b31      	ldr	r3, [pc, #196]	@ (8004ae4 <xPortStartScheduler+0x134>)
 8004a20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a22:	4b31      	ldr	r3, [pc, #196]	@ (8004ae8 <xPortStartScheduler+0x138>)
 8004a24:	2207      	movs	r2, #7
 8004a26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a28:	e009      	b.n	8004a3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ae8 <xPortStartScheduler+0x138>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae8 <xPortStartScheduler+0x138>)
 8004a32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a46:	2b80      	cmp	r3, #128	@ 0x80
 8004a48:	d0ef      	beq.n	8004a2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a4a:	4b27      	ldr	r3, [pc, #156]	@ (8004ae8 <xPortStartScheduler+0x138>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f1c3 0307 	rsb	r3, r3, #7
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d00b      	beq.n	8004a6e <xPortStartScheduler+0xbe>
	__asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	60bb      	str	r3, [r7, #8]
}
 8004a68:	bf00      	nop
 8004a6a:	bf00      	nop
 8004a6c:	e7fd      	b.n	8004a6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae8 <xPortStartScheduler+0x138>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae8 <xPortStartScheduler+0x138>)
 8004a76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a78:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae8 <xPortStartScheduler+0x138>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a80:	4a19      	ldr	r2, [pc, #100]	@ (8004ae8 <xPortStartScheduler+0x138>)
 8004a82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a8c:	4b17      	ldr	r3, [pc, #92]	@ (8004aec <xPortStartScheduler+0x13c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a16      	ldr	r2, [pc, #88]	@ (8004aec <xPortStartScheduler+0x13c>)
 8004a92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a98:	4b14      	ldr	r3, [pc, #80]	@ (8004aec <xPortStartScheduler+0x13c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a13      	ldr	r2, [pc, #76]	@ (8004aec <xPortStartScheduler+0x13c>)
 8004a9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004aa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004aa4:	f000 f8da 	bl	8004c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004aa8:	4b11      	ldr	r3, [pc, #68]	@ (8004af0 <xPortStartScheduler+0x140>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004aae:	f000 f8f9 	bl	8004ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ab2:	4b10      	ldr	r3, [pc, #64]	@ (8004af4 <xPortStartScheduler+0x144>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8004af4 <xPortStartScheduler+0x144>)
 8004ab8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004abc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004abe:	f7ff ff63 	bl	8004988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ac2:	f7ff fa73 	bl	8003fac <vTaskSwitchContext>
	prvTaskExitError();
 8004ac6:	f7ff ff1b 	bl	8004900 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	e000ed00 	.word	0xe000ed00
 8004ad8:	410fc271 	.word	0x410fc271
 8004adc:	410fc270 	.word	0x410fc270
 8004ae0:	e000e400 	.word	0xe000e400
 8004ae4:	200004ec 	.word	0x200004ec
 8004ae8:	200004f0 	.word	0x200004f0
 8004aec:	e000ed20 	.word	0xe000ed20
 8004af0:	2000000c 	.word	0x2000000c
 8004af4:	e000ef34 	.word	0xe000ef34

08004af8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	607b      	str	r3, [r7, #4]
}
 8004b10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b12:	4b10      	ldr	r3, [pc, #64]	@ (8004b54 <vPortEnterCritical+0x5c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3301      	adds	r3, #1
 8004b18:	4a0e      	ldr	r2, [pc, #56]	@ (8004b54 <vPortEnterCritical+0x5c>)
 8004b1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b54 <vPortEnterCritical+0x5c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d110      	bne.n	8004b46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b24:	4b0c      	ldr	r3, [pc, #48]	@ (8004b58 <vPortEnterCritical+0x60>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00b      	beq.n	8004b46 <vPortEnterCritical+0x4e>
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	603b      	str	r3, [r7, #0]
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	e7fd      	b.n	8004b42 <vPortEnterCritical+0x4a>
	}
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	2000000c 	.word	0x2000000c
 8004b58:	e000ed04 	.word	0xe000ed04

08004b5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b62:	4b12      	ldr	r3, [pc, #72]	@ (8004bac <vPortExitCritical+0x50>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <vPortExitCritical+0x26>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	607b      	str	r3, [r7, #4]
}
 8004b7c:	bf00      	nop
 8004b7e:	bf00      	nop
 8004b80:	e7fd      	b.n	8004b7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b82:	4b0a      	ldr	r3, [pc, #40]	@ (8004bac <vPortExitCritical+0x50>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	4a08      	ldr	r2, [pc, #32]	@ (8004bac <vPortExitCritical+0x50>)
 8004b8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b8c:	4b07      	ldr	r3, [pc, #28]	@ (8004bac <vPortExitCritical+0x50>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <vPortExitCritical+0x44>
 8004b94:	2300      	movs	r3, #0
 8004b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	f383 8811 	msr	BASEPRI, r3
}
 8004b9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	2000000c 	.word	0x2000000c

08004bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004bb0:	f3ef 8009 	mrs	r0, PSP
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	4b15      	ldr	r3, [pc, #84]	@ (8004c10 <pxCurrentTCBConst>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	f01e 0f10 	tst.w	lr, #16
 8004bc0:	bf08      	it	eq
 8004bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bca:	6010      	str	r0, [r2, #0]
 8004bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004bd4:	f380 8811 	msr	BASEPRI, r0
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f7ff f9e4 	bl	8003fac <vTaskSwitchContext>
 8004be4:	f04f 0000 	mov.w	r0, #0
 8004be8:	f380 8811 	msr	BASEPRI, r0
 8004bec:	bc09      	pop	{r0, r3}
 8004bee:	6819      	ldr	r1, [r3, #0]
 8004bf0:	6808      	ldr	r0, [r1, #0]
 8004bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf6:	f01e 0f10 	tst.w	lr, #16
 8004bfa:	bf08      	it	eq
 8004bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c00:	f380 8809 	msr	PSP, r0
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	f3af 8000 	nop.w

08004c10 <pxCurrentTCBConst>:
 8004c10:	200003c0 	.word	0x200003c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop

08004c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	607b      	str	r3, [r7, #4]
}
 8004c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c32:	f7ff f901 	bl	8003e38 <xTaskIncrementTick>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c3c:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <SysTick_Handler+0x40>)
 8004c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	2300      	movs	r3, #0
 8004c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f383 8811 	msr	BASEPRI, r3
}
 8004c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c60:	4b0b      	ldr	r3, [pc, #44]	@ (8004c90 <vPortSetupTimerInterrupt+0x34>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c66:	4b0b      	ldr	r3, [pc, #44]	@ (8004c94 <vPortSetupTimerInterrupt+0x38>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c98 <vPortSetupTimerInterrupt+0x3c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a0a      	ldr	r2, [pc, #40]	@ (8004c9c <vPortSetupTimerInterrupt+0x40>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	4a09      	ldr	r2, [pc, #36]	@ (8004ca0 <vPortSetupTimerInterrupt+0x44>)
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c7e:	4b04      	ldr	r3, [pc, #16]	@ (8004c90 <vPortSetupTimerInterrupt+0x34>)
 8004c80:	2207      	movs	r2, #7
 8004c82:	601a      	str	r2, [r3, #0]
}
 8004c84:	bf00      	nop
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	e000e010 	.word	0xe000e010
 8004c94:	e000e018 	.word	0xe000e018
 8004c98:	20000000 	.word	0x20000000
 8004c9c:	10624dd3 	.word	0x10624dd3
 8004ca0:	e000e014 	.word	0xe000e014

08004ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004cb4 <vPortEnableVFP+0x10>
 8004ca8:	6801      	ldr	r1, [r0, #0]
 8004caa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004cae:	6001      	str	r1, [r0, #0]
 8004cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004cb2:	bf00      	nop
 8004cb4:	e000ed88 	.word	0xe000ed88

08004cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cbe:	f3ef 8305 	mrs	r3, IPSR
 8004cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b0f      	cmp	r3, #15
 8004cc8:	d915      	bls.n	8004cf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cca:	4a18      	ldr	r2, [pc, #96]	@ (8004d2c <vPortValidateInterruptPriority+0x74>)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cd4:	4b16      	ldr	r3, [pc, #88]	@ (8004d30 <vPortValidateInterruptPriority+0x78>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	7afa      	ldrb	r2, [r7, #11]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d20b      	bcs.n	8004cf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	607b      	str	r3, [r7, #4]
}
 8004cf0:	bf00      	nop
 8004cf2:	bf00      	nop
 8004cf4:	e7fd      	b.n	8004cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8004d34 <vPortValidateInterruptPriority+0x7c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8004d38 <vPortValidateInterruptPriority+0x80>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d90b      	bls.n	8004d1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	603b      	str	r3, [r7, #0]
}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
 8004d1c:	e7fd      	b.n	8004d1a <vPortValidateInterruptPriority+0x62>
	}
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	e000e3f0 	.word	0xe000e3f0
 8004d30:	200004ec 	.word	0x200004ec
 8004d34:	e000ed0c 	.word	0xe000ed0c
 8004d38:	200004f0 	.word	0x200004f0

08004d3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08a      	sub	sp, #40	@ 0x28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d48:	f7fe ffca 	bl	8003ce0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d4c:	4b5c      	ldr	r3, [pc, #368]	@ (8004ec0 <pvPortMalloc+0x184>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d54:	f000 f924 	bl	8004fa0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d58:	4b5a      	ldr	r3, [pc, #360]	@ (8004ec4 <pvPortMalloc+0x188>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f040 8095 	bne.w	8004e90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01e      	beq.n	8004daa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4413      	add	r3, r2
 8004d72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d015      	beq.n	8004daa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f023 0307 	bic.w	r3, r3, #7
 8004d84:	3308      	adds	r3, #8
 8004d86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <pvPortMalloc+0x6e>
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	617b      	str	r3, [r7, #20]
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop
 8004da8:	e7fd      	b.n	8004da6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d06f      	beq.n	8004e90 <pvPortMalloc+0x154>
 8004db0:	4b45      	ldr	r3, [pc, #276]	@ (8004ec8 <pvPortMalloc+0x18c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d86a      	bhi.n	8004e90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004dba:	4b44      	ldr	r3, [pc, #272]	@ (8004ecc <pvPortMalloc+0x190>)
 8004dbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004dbe:	4b43      	ldr	r3, [pc, #268]	@ (8004ecc <pvPortMalloc+0x190>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dc4:	e004      	b.n	8004dd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d903      	bls.n	8004de2 <pvPortMalloc+0xa6>
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f1      	bne.n	8004dc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004de2:	4b37      	ldr	r3, [pc, #220]	@ (8004ec0 <pvPortMalloc+0x184>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d051      	beq.n	8004e90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2208      	movs	r2, #8
 8004df2:	4413      	add	r3, r2
 8004df4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	1ad2      	subs	r2, r2, r3
 8004e06:	2308      	movs	r3, #8
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d920      	bls.n	8004e50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4413      	add	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00b      	beq.n	8004e38 <pvPortMalloc+0xfc>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	613b      	str	r3, [r7, #16]
}
 8004e32:	bf00      	nop
 8004e34:	bf00      	nop
 8004e36:	e7fd      	b.n	8004e34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	1ad2      	subs	r2, r2, r3
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e4a:	69b8      	ldr	r0, [r7, #24]
 8004e4c:	f000 f90a 	bl	8005064 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e50:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec8 <pvPortMalloc+0x18c>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec8 <pvPortMalloc+0x18c>)
 8004e5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec8 <pvPortMalloc+0x18c>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed0 <pvPortMalloc+0x194>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d203      	bcs.n	8004e72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e6a:	4b17      	ldr	r3, [pc, #92]	@ (8004ec8 <pvPortMalloc+0x18c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a18      	ldr	r2, [pc, #96]	@ (8004ed0 <pvPortMalloc+0x194>)
 8004e70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	4b13      	ldr	r3, [pc, #76]	@ (8004ec4 <pvPortMalloc+0x188>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e86:	4b13      	ldr	r3, [pc, #76]	@ (8004ed4 <pvPortMalloc+0x198>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	4a11      	ldr	r2, [pc, #68]	@ (8004ed4 <pvPortMalloc+0x198>)
 8004e8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e90:	f7fe ff34 	bl	8003cfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <pvPortMalloc+0x17a>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	60fb      	str	r3, [r7, #12]
}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
 8004eb4:	e7fd      	b.n	8004eb2 <pvPortMalloc+0x176>
	return pvReturn;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3728      	adds	r7, #40	@ 0x28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	200040fc 	.word	0x200040fc
 8004ec4:	20004110 	.word	0x20004110
 8004ec8:	20004100 	.word	0x20004100
 8004ecc:	200040f4 	.word	0x200040f4
 8004ed0:	20004104 	.word	0x20004104
 8004ed4:	20004108 	.word	0x20004108

08004ed8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d04f      	beq.n	8004f8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004eea:	2308      	movs	r3, #8
 8004eec:	425b      	negs	r3, r3
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	4b25      	ldr	r3, [pc, #148]	@ (8004f94 <vPortFree+0xbc>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10b      	bne.n	8004f1e <vPortFree+0x46>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	60fb      	str	r3, [r7, #12]
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	e7fd      	b.n	8004f1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <vPortFree+0x66>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	60bb      	str	r3, [r7, #8]
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	e7fd      	b.n	8004f3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	4b14      	ldr	r3, [pc, #80]	@ (8004f94 <vPortFree+0xbc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01e      	beq.n	8004f8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d11a      	bne.n	8004f8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	4b0e      	ldr	r3, [pc, #56]	@ (8004f94 <vPortFree+0xbc>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	401a      	ands	r2, r3
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f64:	f7fe febc 	bl	8003ce0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f98 <vPortFree+0xc0>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4413      	add	r3, r2
 8004f72:	4a09      	ldr	r2, [pc, #36]	@ (8004f98 <vPortFree+0xc0>)
 8004f74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f76:	6938      	ldr	r0, [r7, #16]
 8004f78:	f000 f874 	bl	8005064 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f7c:	4b07      	ldr	r3, [pc, #28]	@ (8004f9c <vPortFree+0xc4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3301      	adds	r3, #1
 8004f82:	4a06      	ldr	r2, [pc, #24]	@ (8004f9c <vPortFree+0xc4>)
 8004f84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f86:	f7fe feb9 	bl	8003cfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f8a:	bf00      	nop
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20004110 	.word	0x20004110
 8004f98:	20004100 	.word	0x20004100
 8004f9c:	2000410c 	.word	0x2000410c

08004fa0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fa6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004faa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fac:	4b27      	ldr	r3, [pc, #156]	@ (800504c <prvHeapInit+0xac>)
 8004fae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00c      	beq.n	8004fd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3307      	adds	r3, #7
 8004fbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0307 	bic.w	r3, r3, #7
 8004fc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	4a1f      	ldr	r2, [pc, #124]	@ (800504c <prvHeapInit+0xac>)
 8004fd0:	4413      	add	r3, r2
 8004fd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005050 <prvHeapInit+0xb0>)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fde:	4b1c      	ldr	r3, [pc, #112]	@ (8005050 <prvHeapInit+0xb0>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	4413      	add	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004fec:	2208      	movs	r2, #8
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1a9b      	subs	r3, r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0307 	bic.w	r3, r3, #7
 8004ffa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4a15      	ldr	r2, [pc, #84]	@ (8005054 <prvHeapInit+0xb4>)
 8005000:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005002:	4b14      	ldr	r3, [pc, #80]	@ (8005054 <prvHeapInit+0xb4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2200      	movs	r2, #0
 8005008:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800500a:	4b12      	ldr	r3, [pc, #72]	@ (8005054 <prvHeapInit+0xb4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	1ad2      	subs	r2, r2, r3
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005020:	4b0c      	ldr	r3, [pc, #48]	@ (8005054 <prvHeapInit+0xb4>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	4a0a      	ldr	r2, [pc, #40]	@ (8005058 <prvHeapInit+0xb8>)
 800502e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4a09      	ldr	r2, [pc, #36]	@ (800505c <prvHeapInit+0xbc>)
 8005036:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005038:	4b09      	ldr	r3, [pc, #36]	@ (8005060 <prvHeapInit+0xc0>)
 800503a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800503e:	601a      	str	r2, [r3, #0]
}
 8005040:	bf00      	nop
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	200004f4 	.word	0x200004f4
 8005050:	200040f4 	.word	0x200040f4
 8005054:	200040fc 	.word	0x200040fc
 8005058:	20004104 	.word	0x20004104
 800505c:	20004100 	.word	0x20004100
 8005060:	20004110 	.word	0x20004110

08005064 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800506c:	4b28      	ldr	r3, [pc, #160]	@ (8005110 <prvInsertBlockIntoFreeList+0xac>)
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	e002      	b.n	8005078 <prvInsertBlockIntoFreeList+0x14>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	429a      	cmp	r2, r3
 8005080:	d8f7      	bhi.n	8005072 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	4413      	add	r3, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	d108      	bne.n	80050a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	441a      	add	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	441a      	add	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d118      	bne.n	80050ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4b15      	ldr	r3, [pc, #84]	@ (8005114 <prvInsertBlockIntoFreeList+0xb0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d00d      	beq.n	80050e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	441a      	add	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	e008      	b.n	80050f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005114 <prvInsertBlockIntoFreeList+0xb0>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	e003      	b.n	80050f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d002      	beq.n	8005102 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005102:	bf00      	nop
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	200040f4 	.word	0x200040f4
 8005114:	200040fc 	.word	0x200040fc

08005118 <memset>:
 8005118:	4402      	add	r2, r0
 800511a:	4603      	mov	r3, r0
 800511c:	4293      	cmp	r3, r2
 800511e:	d100      	bne.n	8005122 <memset+0xa>
 8005120:	4770      	bx	lr
 8005122:	f803 1b01 	strb.w	r1, [r3], #1
 8005126:	e7f9      	b.n	800511c <memset+0x4>

08005128 <_reclaim_reent>:
 8005128:	4b29      	ldr	r3, [pc, #164]	@ (80051d0 <_reclaim_reent+0xa8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4283      	cmp	r3, r0
 800512e:	b570      	push	{r4, r5, r6, lr}
 8005130:	4604      	mov	r4, r0
 8005132:	d04b      	beq.n	80051cc <_reclaim_reent+0xa4>
 8005134:	69c3      	ldr	r3, [r0, #28]
 8005136:	b1ab      	cbz	r3, 8005164 <_reclaim_reent+0x3c>
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	b16b      	cbz	r3, 8005158 <_reclaim_reent+0x30>
 800513c:	2500      	movs	r5, #0
 800513e:	69e3      	ldr	r3, [r4, #28]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	5959      	ldr	r1, [r3, r5]
 8005144:	2900      	cmp	r1, #0
 8005146:	d13b      	bne.n	80051c0 <_reclaim_reent+0x98>
 8005148:	3504      	adds	r5, #4
 800514a:	2d80      	cmp	r5, #128	@ 0x80
 800514c:	d1f7      	bne.n	800513e <_reclaim_reent+0x16>
 800514e:	69e3      	ldr	r3, [r4, #28]
 8005150:	4620      	mov	r0, r4
 8005152:	68d9      	ldr	r1, [r3, #12]
 8005154:	f000 f872 	bl	800523c <_free_r>
 8005158:	69e3      	ldr	r3, [r4, #28]
 800515a:	6819      	ldr	r1, [r3, #0]
 800515c:	b111      	cbz	r1, 8005164 <_reclaim_reent+0x3c>
 800515e:	4620      	mov	r0, r4
 8005160:	f000 f86c 	bl	800523c <_free_r>
 8005164:	6961      	ldr	r1, [r4, #20]
 8005166:	b111      	cbz	r1, 800516e <_reclaim_reent+0x46>
 8005168:	4620      	mov	r0, r4
 800516a:	f000 f867 	bl	800523c <_free_r>
 800516e:	69e1      	ldr	r1, [r4, #28]
 8005170:	b111      	cbz	r1, 8005178 <_reclaim_reent+0x50>
 8005172:	4620      	mov	r0, r4
 8005174:	f000 f862 	bl	800523c <_free_r>
 8005178:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800517a:	b111      	cbz	r1, 8005182 <_reclaim_reent+0x5a>
 800517c:	4620      	mov	r0, r4
 800517e:	f000 f85d 	bl	800523c <_free_r>
 8005182:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005184:	b111      	cbz	r1, 800518c <_reclaim_reent+0x64>
 8005186:	4620      	mov	r0, r4
 8005188:	f000 f858 	bl	800523c <_free_r>
 800518c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800518e:	b111      	cbz	r1, 8005196 <_reclaim_reent+0x6e>
 8005190:	4620      	mov	r0, r4
 8005192:	f000 f853 	bl	800523c <_free_r>
 8005196:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005198:	b111      	cbz	r1, 80051a0 <_reclaim_reent+0x78>
 800519a:	4620      	mov	r0, r4
 800519c:	f000 f84e 	bl	800523c <_free_r>
 80051a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80051a2:	b111      	cbz	r1, 80051aa <_reclaim_reent+0x82>
 80051a4:	4620      	mov	r0, r4
 80051a6:	f000 f849 	bl	800523c <_free_r>
 80051aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80051ac:	b111      	cbz	r1, 80051b4 <_reclaim_reent+0x8c>
 80051ae:	4620      	mov	r0, r4
 80051b0:	f000 f844 	bl	800523c <_free_r>
 80051b4:	6a23      	ldr	r3, [r4, #32]
 80051b6:	b14b      	cbz	r3, 80051cc <_reclaim_reent+0xa4>
 80051b8:	4620      	mov	r0, r4
 80051ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80051be:	4718      	bx	r3
 80051c0:	680e      	ldr	r6, [r1, #0]
 80051c2:	4620      	mov	r0, r4
 80051c4:	f000 f83a 	bl	800523c <_free_r>
 80051c8:	4631      	mov	r1, r6
 80051ca:	e7bb      	b.n	8005144 <_reclaim_reent+0x1c>
 80051cc:	bd70      	pop	{r4, r5, r6, pc}
 80051ce:	bf00      	nop
 80051d0:	20000010 	.word	0x20000010

080051d4 <__libc_init_array>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	4d0d      	ldr	r5, [pc, #52]	@ (800520c <__libc_init_array+0x38>)
 80051d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005210 <__libc_init_array+0x3c>)
 80051da:	1b64      	subs	r4, r4, r5
 80051dc:	10a4      	asrs	r4, r4, #2
 80051de:	2600      	movs	r6, #0
 80051e0:	42a6      	cmp	r6, r4
 80051e2:	d109      	bne.n	80051f8 <__libc_init_array+0x24>
 80051e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005214 <__libc_init_array+0x40>)
 80051e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005218 <__libc_init_array+0x44>)
 80051e8:	f000 f87e 	bl	80052e8 <_init>
 80051ec:	1b64      	subs	r4, r4, r5
 80051ee:	10a4      	asrs	r4, r4, #2
 80051f0:	2600      	movs	r6, #0
 80051f2:	42a6      	cmp	r6, r4
 80051f4:	d105      	bne.n	8005202 <__libc_init_array+0x2e>
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
 80051f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fc:	4798      	blx	r3
 80051fe:	3601      	adds	r6, #1
 8005200:	e7ee      	b.n	80051e0 <__libc_init_array+0xc>
 8005202:	f855 3b04 	ldr.w	r3, [r5], #4
 8005206:	4798      	blx	r3
 8005208:	3601      	adds	r6, #1
 800520a:	e7f2      	b.n	80051f2 <__libc_init_array+0x1e>
 800520c:	080054c8 	.word	0x080054c8
 8005210:	080054c8 	.word	0x080054c8
 8005214:	080054c8 	.word	0x080054c8
 8005218:	080054cc 	.word	0x080054cc

0800521c <__retarget_lock_acquire_recursive>:
 800521c:	4770      	bx	lr

0800521e <__retarget_lock_release_recursive>:
 800521e:	4770      	bx	lr

08005220 <memcpy>:
 8005220:	440a      	add	r2, r1
 8005222:	4291      	cmp	r1, r2
 8005224:	f100 33ff 	add.w	r3, r0, #4294967295
 8005228:	d100      	bne.n	800522c <memcpy+0xc>
 800522a:	4770      	bx	lr
 800522c:	b510      	push	{r4, lr}
 800522e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005232:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005236:	4291      	cmp	r1, r2
 8005238:	d1f9      	bne.n	800522e <memcpy+0xe>
 800523a:	bd10      	pop	{r4, pc}

0800523c <_free_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4605      	mov	r5, r0
 8005240:	2900      	cmp	r1, #0
 8005242:	d041      	beq.n	80052c8 <_free_r+0x8c>
 8005244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005248:	1f0c      	subs	r4, r1, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	bfb8      	it	lt
 800524e:	18e4      	addlt	r4, r4, r3
 8005250:	f000 f83e 	bl	80052d0 <__malloc_lock>
 8005254:	4a1d      	ldr	r2, [pc, #116]	@ (80052cc <_free_r+0x90>)
 8005256:	6813      	ldr	r3, [r2, #0]
 8005258:	b933      	cbnz	r3, 8005268 <_free_r+0x2c>
 800525a:	6063      	str	r3, [r4, #4]
 800525c:	6014      	str	r4, [r2, #0]
 800525e:	4628      	mov	r0, r5
 8005260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005264:	f000 b83a 	b.w	80052dc <__malloc_unlock>
 8005268:	42a3      	cmp	r3, r4
 800526a:	d908      	bls.n	800527e <_free_r+0x42>
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	1821      	adds	r1, r4, r0
 8005270:	428b      	cmp	r3, r1
 8005272:	bf01      	itttt	eq
 8005274:	6819      	ldreq	r1, [r3, #0]
 8005276:	685b      	ldreq	r3, [r3, #4]
 8005278:	1809      	addeq	r1, r1, r0
 800527a:	6021      	streq	r1, [r4, #0]
 800527c:	e7ed      	b.n	800525a <_free_r+0x1e>
 800527e:	461a      	mov	r2, r3
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	b10b      	cbz	r3, 8005288 <_free_r+0x4c>
 8005284:	42a3      	cmp	r3, r4
 8005286:	d9fa      	bls.n	800527e <_free_r+0x42>
 8005288:	6811      	ldr	r1, [r2, #0]
 800528a:	1850      	adds	r0, r2, r1
 800528c:	42a0      	cmp	r0, r4
 800528e:	d10b      	bne.n	80052a8 <_free_r+0x6c>
 8005290:	6820      	ldr	r0, [r4, #0]
 8005292:	4401      	add	r1, r0
 8005294:	1850      	adds	r0, r2, r1
 8005296:	4283      	cmp	r3, r0
 8005298:	6011      	str	r1, [r2, #0]
 800529a:	d1e0      	bne.n	800525e <_free_r+0x22>
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	6053      	str	r3, [r2, #4]
 80052a2:	4408      	add	r0, r1
 80052a4:	6010      	str	r0, [r2, #0]
 80052a6:	e7da      	b.n	800525e <_free_r+0x22>
 80052a8:	d902      	bls.n	80052b0 <_free_r+0x74>
 80052aa:	230c      	movs	r3, #12
 80052ac:	602b      	str	r3, [r5, #0]
 80052ae:	e7d6      	b.n	800525e <_free_r+0x22>
 80052b0:	6820      	ldr	r0, [r4, #0]
 80052b2:	1821      	adds	r1, r4, r0
 80052b4:	428b      	cmp	r3, r1
 80052b6:	bf04      	itt	eq
 80052b8:	6819      	ldreq	r1, [r3, #0]
 80052ba:	685b      	ldreq	r3, [r3, #4]
 80052bc:	6063      	str	r3, [r4, #4]
 80052be:	bf04      	itt	eq
 80052c0:	1809      	addeq	r1, r1, r0
 80052c2:	6021      	streq	r1, [r4, #0]
 80052c4:	6054      	str	r4, [r2, #4]
 80052c6:	e7ca      	b.n	800525e <_free_r+0x22>
 80052c8:	bd38      	pop	{r3, r4, r5, pc}
 80052ca:	bf00      	nop
 80052cc:	20004250 	.word	0x20004250

080052d0 <__malloc_lock>:
 80052d0:	4801      	ldr	r0, [pc, #4]	@ (80052d8 <__malloc_lock+0x8>)
 80052d2:	f7ff bfa3 	b.w	800521c <__retarget_lock_acquire_recursive>
 80052d6:	bf00      	nop
 80052d8:	2000424c 	.word	0x2000424c

080052dc <__malloc_unlock>:
 80052dc:	4801      	ldr	r0, [pc, #4]	@ (80052e4 <__malloc_unlock+0x8>)
 80052de:	f7ff bf9e 	b.w	800521e <__retarget_lock_release_recursive>
 80052e2:	bf00      	nop
 80052e4:	2000424c 	.word	0x2000424c

080052e8 <_init>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	bf00      	nop
 80052ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ee:	bc08      	pop	{r3}
 80052f0:	469e      	mov	lr, r3
 80052f2:	4770      	bx	lr

080052f4 <_fini>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	bf00      	nop
 80052f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fa:	bc08      	pop	{r3}
 80052fc:	469e      	mov	lr, r3
 80052fe:	4770      	bx	lr
